
Flying Radio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037f4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08003984  08003984  00004984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c64  08003c64  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003c64  08003c64  00004c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c6c  08003c6c  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c6c  08003c6c  00004c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c70  08003c70  00004c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003c74  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          000001cc  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000234  20000234  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006828  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001659  00000000  00000000  0000b8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000738  00000000  00000000  0000cf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000558  00000000  00000000  0000d658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020d94  00000000  00000000  0000dbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008026  00000000  00000000  0002e944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4007  00000000  00000000  0003696a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fa971  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002588  00000000  00000000  000fa9b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000fcf3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800396c 	.word	0x0800396c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800396c 	.word	0x0800396c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d013      	beq.n	80005ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d00b      	beq.n	80005ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d4:	e000      	b.n	80005d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d0f9      	beq.n	80005d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005e2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005ec:	687b      	ldr	r3, [r7, #4]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <_write>:
void ToggleBit(void) {
    my_bit = !my_bit;
}


int _write(int file, char *ptr, int len) {
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b086      	sub	sp, #24
 80005fe:	af00      	add	r7, sp, #0
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	60b9      	str	r1, [r7, #8]
 8000604:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
 800060a:	e009      	b.n	8000620 <_write+0x26>
        ITM_SendChar(ptr[i]); // Wysyłanie znaków do kanału 0 SWV
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	4413      	add	r3, r2
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ffc9 	bl	80005ac <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	3301      	adds	r3, #1
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	697a      	ldr	r2, [r7, #20]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	429a      	cmp	r2, r3
 8000626:	dbf1      	blt.n	800060c <_write+0x12>
    }
    return len;
 8000628:	687b      	ldr	r3, [r7, #4]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3718      	adds	r7, #24
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <LoRa_Select>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//LoRa handling functions
void LoRa_Select(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET); // CS LOW
 8000638:	2200      	movs	r2, #0
 800063a:	2110      	movs	r1, #16
 800063c:	4802      	ldr	r0, [pc, #8]	@ (8000648 <LoRa_Select+0x14>)
 800063e:	f001 f8cd 	bl	80017dc <HAL_GPIO_WritePin>
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40020800 	.word	0x40020800

0800064c <LoRa_Unselect>:
void LoRa_Unselect(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET); // CS HIGH
 8000650:	2201      	movs	r2, #1
 8000652:	2110      	movs	r1, #16
 8000654:	4802      	ldr	r0, [pc, #8]	@ (8000660 <LoRa_Unselect+0x14>)
 8000656:	f001 f8c1 	bl	80017dc <HAL_GPIO_WritePin>
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40020800 	.word	0x40020800

08000664 <LoRa_Reset>:

// LoRa reset function
void LoRa_Reset(void) {
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	2120      	movs	r1, #32
 800066c:	4807      	ldr	r0, [pc, #28]	@ (800068c <LoRa_Reset+0x28>)
 800066e:	f001 f8b5 	bl	80017dc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000672:	200a      	movs	r0, #10
 8000674:	f000 fde0 	bl	8001238 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2120      	movs	r1, #32
 800067c:	4803      	ldr	r0, [pc, #12]	@ (800068c <LoRa_Reset+0x28>)
 800067e:	f001 f8ad 	bl	80017dc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000682:	200a      	movs	r0, #10
 8000684:	f000 fdd8 	bl	8001238 <HAL_Delay>
}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40020800 	.word	0x40020800

08000690 <LoRa_SPI_ReadWrite>:

// Funkcja SPI do komunikacji z LoRa – jeden bajt w obie strony
uint8_t LoRa_SPI_ReadWrite(uint8_t data) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af02      	add	r7, sp, #8
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
    uint8_t received;
    HAL_SPI_TransmitReceive(&hspi1, &data, &received, 1, HAL_MAX_DELAY);
 800069a:	f107 020f 	add.w	r2, r7, #15
 800069e:	1df9      	adds	r1, r7, #7
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2301      	movs	r3, #1
 80006a8:	4803      	ldr	r0, [pc, #12]	@ (80006b8 <LoRa_SPI_ReadWrite+0x28>)
 80006aa:	f001 fd76 	bl	800219a <HAL_SPI_TransmitReceive>
    return received;
 80006ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000084 	.word	0x20000084

080006bc <LoRa_WriteRegister>:

// Zapis do rejestru SX1278
void LoRa_WriteRegister(uint8_t reg, uint8_t value) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	460a      	mov	r2, r1
 80006c6:	71fb      	strb	r3, [r7, #7]
 80006c8:	4613      	mov	r3, r2
 80006ca:	71bb      	strb	r3, [r7, #6]
    LoRa_Select();
 80006cc:	f7ff ffb2 	bl	8000634 <LoRa_Select>
    LoRa_SPI_ReadWrite(reg | 0x80); // Bit 7 = 1 -> zapis
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ffd9 	bl	8000690 <LoRa_SPI_ReadWrite>
    LoRa_SPI_ReadWrite(value);
 80006de:	79bb      	ldrb	r3, [r7, #6]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ffd5 	bl	8000690 <LoRa_SPI_ReadWrite>
    LoRa_Unselect();
 80006e6:	f7ff ffb1 	bl	800064c <LoRa_Unselect>
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <LoRa_ReadRegister>:

// Odczyt z rejestru SX1278
uint8_t LoRa_ReadRegister(uint8_t reg) {
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b084      	sub	sp, #16
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	4603      	mov	r3, r0
 80006fa:	71fb      	strb	r3, [r7, #7]
    LoRa_Select();
 80006fc:	f7ff ff9a 	bl	8000634 <LoRa_Select>
    LoRa_SPI_ReadWrite(reg & 0x7F); // Bit 7 = 0 -> odczyt
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000706:	b2db      	uxtb	r3, r3
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ffc1 	bl	8000690 <LoRa_SPI_ReadWrite>
    uint8_t value = LoRa_SPI_ReadWrite(0x00);
 800070e:	2000      	movs	r0, #0
 8000710:	f7ff ffbe 	bl	8000690 <LoRa_SPI_ReadWrite>
 8000714:	4603      	mov	r3, r0
 8000716:	73fb      	strb	r3, [r7, #15]
    LoRa_Unselect();
 8000718:	f7ff ff98 	bl	800064c <LoRa_Unselect>
    return value;
 800071c:	7bfb      	ldrb	r3, [r7, #15]
}
 800071e:	4618      	mov	r0, r3
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <LoRa_Init>:


void LoRa_Init(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
    LoRa_Reset();
 800072e:	f7ff ff99 	bl	8000664 <LoRa_Reset>
    HAL_Delay(200);
 8000732:	20c8      	movs	r0, #200	@ 0xc8
 8000734:	f000 fd80 	bl	8001238 <HAL_Delay>

    uint8_t version = LoRa_ReadRegister(0x42);
 8000738:	2042      	movs	r0, #66	@ 0x42
 800073a:	f7ff ffda 	bl	80006f2 <LoRa_ReadRegister>
 800073e:	4603      	mov	r3, r0
 8000740:	72fb      	strb	r3, [r7, #11]
    if (version != 0x12) {
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	2b12      	cmp	r3, #18
 8000746:	d022      	beq.n	800078e <LoRa_Init+0x66>

    	// Błąd - moduł nie odpowiada poprawnie
    	 for (int i = 0; i < 5; i++) {
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	e014      	b.n	8000778 <LoRa_Init+0x50>
    		        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);   // zapal diodę
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000754:	483d      	ldr	r0, [pc, #244]	@ (800084c <LoRa_Init+0x124>)
 8000756:	f001 f841 	bl	80017dc <HAL_GPIO_WritePin>
    	            HAL_Delay(200);
 800075a:	20c8      	movs	r0, #200	@ 0xc8
 800075c:	f000 fd6c 	bl	8001238 <HAL_Delay>
    	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET); // zgaś diodę
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000766:	4839      	ldr	r0, [pc, #228]	@ (800084c <LoRa_Init+0x124>)
 8000768:	f001 f838 	bl	80017dc <HAL_GPIO_WritePin>
    	            HAL_Delay(200);
 800076c:	20c8      	movs	r0, #200	@ 0xc8
 800076e:	f000 fd63 	bl	8001238 <HAL_Delay>
    	 for (int i = 0; i < 5; i++) {
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	3301      	adds	r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	2b04      	cmp	r3, #4
 800077c:	dde7      	ble.n	800074e <LoRa_Init+0x26>
    	 }
    	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800077e:	2201      	movs	r2, #1
 8000780:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000784:	4831      	ldr	r0, [pc, #196]	@ (800084c <LoRa_Init+0x124>)
 8000786:	f001 f829 	bl	80017dc <HAL_GPIO_WritePin>
        while(1);
 800078a:	bf00      	nop
 800078c:	e7fd      	b.n	800078a <LoRa_Init+0x62>
    }

    // Sleep + LoRa mode enabled (bit7=1)
    LoRa_WriteRegister(0x01, 0x80);
 800078e:	2180      	movs	r1, #128	@ 0x80
 8000790:	2001      	movs	r0, #1
 8000792:	f7ff ff93 	bl	80006bc <LoRa_WriteRegister>

    // Dla 433.125 MHz
    uint32_t frf = (uint32_t)(433125000.0 / 61.03515625); // = 7094272 ≈ 0x6C40A0
 8000796:	4b2e      	ldr	r3, [pc, #184]	@ (8000850 <LoRa_Init+0x128>)
 8000798:	607b      	str	r3, [r7, #4]

    LoRa_WriteRegister(0x06, (frf >> 16) & 0xFF); // 0x6C
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	0c1b      	lsrs	r3, r3, #16
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	4619      	mov	r1, r3
 80007a2:	2006      	movs	r0, #6
 80007a4:	f7ff ff8a 	bl	80006bc <LoRa_WriteRegister>
    LoRa_WriteRegister(0x07, (frf >> 8) & 0xFF);  // 0x40
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	0a1b      	lsrs	r3, r3, #8
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	4619      	mov	r1, r3
 80007b0:	2007      	movs	r0, #7
 80007b2:	f7ff ff83 	bl	80006bc <LoRa_WriteRegister>
    LoRa_WriteRegister(0x08, frf & 0xFF);         // 0xA0
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4619      	mov	r1, r3
 80007bc:	2008      	movs	r0, #8
 80007be:	f7ff ff7d 	bl	80006bc <LoRa_WriteRegister>

    // PA config - max power
    LoRa_WriteRegister(0x09, 0x4F);
 80007c2:	214f      	movs	r1, #79	@ 0x4f
 80007c4:	2009      	movs	r0, #9
 80007c6:	f7ff ff79 	bl	80006bc <LoRa_WriteRegister>

    // Ochrona prądu
    LoRa_WriteRegister(0x0A, 0x23);
 80007ca:	2123      	movs	r1, #35	@ 0x23
 80007cc:	200a      	movs	r0, #10
 80007ce:	f7ff ff75 	bl	80006bc <LoRa_WriteRegister>

    // LNA gain max
    LoRa_WriteRegister(0x0B, 0x07);
 80007d2:	2107      	movs	r1, #7
 80007d4:	200b      	movs	r0, #11
 80007d6:	f7ff ff71 	bl	80006bc <LoRa_WriteRegister>

    // Modem config
    LoRa_WriteRegister(0x1D, 0x72); // ModemConfig1: BW=125, CR=4/5
 80007da:	2172      	movs	r1, #114	@ 0x72
 80007dc:	201d      	movs	r0, #29
 80007de:	f7ff ff6d 	bl	80006bc <LoRa_WriteRegister>
    LoRa_WriteRegister(0x1E, 0x94); // ModemConfig2: SF=9, CRC on
 80007e2:	2194      	movs	r1, #148	@ 0x94
 80007e4:	201e      	movs	r0, #30
 80007e6:	f7ff ff69 	bl	80006bc <LoRa_WriteRegister>
    LoRa_WriteRegister(0x26, 0x04); // ModemConfig3: LowDataRateOptimize = off
 80007ea:	2104      	movs	r1, #4
 80007ec:	2026      	movs	r0, #38	@ 0x26
 80007ee:	f7ff ff65 	bl	80006bc <LoRa_WriteRegister>

    printf("ModemConfig1: 0x%02X\n", LoRa_ReadRegister(0x1D));
 80007f2:	201d      	movs	r0, #29
 80007f4:	f7ff ff7d 	bl	80006f2 <LoRa_ReadRegister>
 80007f8:	4603      	mov	r3, r0
 80007fa:	4619      	mov	r1, r3
 80007fc:	4815      	ldr	r0, [pc, #84]	@ (8000854 <LoRa_Init+0x12c>)
 80007fe:	f002 f813 	bl	8002828 <iprintf>
    printf("ModemConfig2: 0x%02X\n", LoRa_ReadRegister(0x1E));
 8000802:	201e      	movs	r0, #30
 8000804:	f7ff ff75 	bl	80006f2 <LoRa_ReadRegister>
 8000808:	4603      	mov	r3, r0
 800080a:	4619      	mov	r1, r3
 800080c:	4812      	ldr	r0, [pc, #72]	@ (8000858 <LoRa_Init+0x130>)
 800080e:	f002 f80b 	bl	8002828 <iprintf>
    printf("ModemConfig3: 0x%02X\n", LoRa_ReadRegister(0x26));
 8000812:	2026      	movs	r0, #38	@ 0x26
 8000814:	f7ff ff6d 	bl	80006f2 <LoRa_ReadRegister>
 8000818:	4603      	mov	r3, r0
 800081a:	4619      	mov	r1, r3
 800081c:	480f      	ldr	r0, [pc, #60]	@ (800085c <LoRa_Init+0x134>)
 800081e:	f002 f803 	bl	8002828 <iprintf>


    // FIFO base address: Tx i Rx poprawnie!
    LoRa_WriteRegister(0x0E, 0x00); // RegFifoTxBaseAddr
 8000822:	2100      	movs	r1, #0
 8000824:	200e      	movs	r0, #14
 8000826:	f7ff ff49 	bl	80006bc <LoRa_WriteRegister>
    LoRa_WriteRegister(0x0F, 0x00); // RegFifoRxBaseAddr
 800082a:	2100      	movs	r1, #0
 800082c:	200f      	movs	r0, #15
 800082e:	f7ff ff45 	bl	80006bc <LoRa_WriteRegister>

    // Tryb RX continuous
    LoRa_WriteRegister(0x01, 0x85); // LoRa mode, RX continuous
 8000832:	2185      	movs	r1, #133	@ 0x85
 8000834:	2001      	movs	r0, #1
 8000836:	f7ff ff41 	bl	80006bc <LoRa_WriteRegister>

    // Wyczyść IRQ
    LoRa_WriteRegister(0x12, 0xFF);
 800083a:	21ff      	movs	r1, #255	@ 0xff
 800083c:	2012      	movs	r0, #18
 800083e:	f7ff ff3d 	bl	80006bc <LoRa_WriteRegister>
}
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40020c00 	.word	0x40020c00
 8000850:	006c4800 	.word	0x006c4800
 8000854:	08003984 	.word	0x08003984
 8000858:	0800399c 	.word	0x0800399c
 800085c:	080039b4 	.word	0x080039b4

08000860 <LoRa_SendText>:

void LoRa_SendText(const char *text) {
 8000860:	b5b0      	push	{r4, r5, r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]

	// 1. Wyczyść flagi IRQ
    LoRa_WriteRegister(0x12, 0xFF);
 8000868:	21ff      	movs	r1, #255	@ 0xff
 800086a:	2012      	movs	r0, #18
 800086c:	f7ff ff26 	bl	80006bc <LoRa_WriteRegister>

    // 1. Ustaw FIFO base addr na 0
    LoRa_WriteRegister(0x0E, 0x00);
 8000870:	2100      	movs	r1, #0
 8000872:	200e      	movs	r0, #14
 8000874:	f7ff ff22 	bl	80006bc <LoRa_WriteRegister>
    LoRa_WriteRegister(0x0D, 0x00);
 8000878:	2100      	movs	r1, #0
 800087a:	200d      	movs	r0, #13
 800087c:	f7ff ff1e 	bl	80006bc <LoRa_WriteRegister>

    // 3. Załaduj dane do FIFO
    LoRa_Select();
 8000880:	f7ff fed8 	bl	8000634 <LoRa_Select>
    LoRa_SPI_ReadWrite(0x80); // FIFO address with write bit
 8000884:	2080      	movs	r0, #128	@ 0x80
 8000886:	f7ff ff03 	bl	8000690 <LoRa_SPI_ReadWrite>


    printf("parametry przed petla for  do wpisywania do fifo\n");
 800088a:	4845      	ldr	r0, [pc, #276]	@ (80009a0 <LoRa_SendText+0x140>)
 800088c:	f002 f834 	bl	80028f8 <puts>
       LoRa_DumpRegisters();
 8000890:	f000 f918 	bl	8000ac4 <LoRa_DumpRegisters>

    for (uint8_t i = 0; i < strlen(text); i++) {
 8000894:	2300      	movs	r3, #0
 8000896:	73fb      	strb	r3, [r7, #15]
 8000898:	e009      	b.n	80008ae <LoRa_SendText+0x4e>
        LoRa_SPI_ReadWrite(text[i]);
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	4413      	add	r3, r2
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fef4 	bl	8000690 <LoRa_SPI_ReadWrite>
    for (uint8_t i = 0; i < strlen(text); i++) {
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	3301      	adds	r3, #1
 80008ac:	73fb      	strb	r3, [r7, #15]
 80008ae:	7bfc      	ldrb	r4, [r7, #15]
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff fc8d 	bl	80001d0 <strlen>
 80008b6:	4603      	mov	r3, r0
 80008b8:	429c      	cmp	r4, r3
 80008ba:	d3ee      	bcc.n	800089a <LoRa_SendText+0x3a>
    }
    LoRa_Unselect();
 80008bc:	f7ff fec6 	bl	800064c <LoRa_Unselect>

    // 4. Ustaw długość wiadomości
    LoRa_WriteRegister(0x22, strlen(text)); // RegPayloadLength
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f7ff fc85 	bl	80001d0 <strlen>
 80008c6:	4603      	mov	r3, r0
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	4619      	mov	r1, r3
 80008cc:	2022      	movs	r0, #34	@ 0x22
 80008ce:	f7ff fef5 	bl	80006bc <LoRa_WriteRegister>

    // 5. Tryb TX (LoRa mode, FSK off, TX on)
    LoRa_WriteRegister(0x01, 0x83); // RegOpMode: LoRa, TX mode
 80008d2:	2183      	movs	r1, #131	@ 0x83
 80008d4:	2001      	movs	r0, #1
 80008d6:	f7ff fef1 	bl	80006bc <LoRa_WriteRegister>

    printf("OpMode=0x%02X, IrqFlags=0x%02X, PayloadLen=%d\r\n",
           LoRa_ReadRegister(0x01),
 80008da:	2001      	movs	r0, #1
 80008dc:	f7ff ff09 	bl	80006f2 <LoRa_ReadRegister>
 80008e0:	4603      	mov	r3, r0
    printf("OpMode=0x%02X, IrqFlags=0x%02X, PayloadLen=%d\r\n",
 80008e2:	461c      	mov	r4, r3
           LoRa_ReadRegister(0x12),
 80008e4:	2012      	movs	r0, #18
 80008e6:	f7ff ff04 	bl	80006f2 <LoRa_ReadRegister>
 80008ea:	4603      	mov	r3, r0
    printf("OpMode=0x%02X, IrqFlags=0x%02X, PayloadLen=%d\r\n",
 80008ec:	461d      	mov	r5, r3
           LoRa_ReadRegister(0x22));
 80008ee:	2022      	movs	r0, #34	@ 0x22
 80008f0:	f7ff feff 	bl	80006f2 <LoRa_ReadRegister>
 80008f4:	4603      	mov	r3, r0
    printf("OpMode=0x%02X, IrqFlags=0x%02X, PayloadLen=%d\r\n",
 80008f6:	462a      	mov	r2, r5
 80008f8:	4621      	mov	r1, r4
 80008fa:	482a      	ldr	r0, [pc, #168]	@ (80009a4 <LoRa_SendText+0x144>)
 80008fc:	f001 ff94 	bl	8002828 <iprintf>

    printf("parametry przed petla while - sprawdzeniem czy tx done\n");
 8000900:	4829      	ldr	r0, [pc, #164]	@ (80009a8 <LoRa_SendText+0x148>)
 8000902:	f001 fff9 	bl	80028f8 <puts>
    LoRa_DumpRegisters();
 8000906:	f000 f8dd 	bl	8000ac4 <LoRa_DumpRegisters>


    // 6. Czekaj na zakończenie transmisji
    while ((LoRa_ReadRegister(0x12) & 0x08) == 0) // TX_DONE = 0x08
 800090a:	e00d      	b.n	8000928 <LoRa_SendText+0xc8>
    {
    	printf("Still waiting... Irq=0x%02X\r\n", LoRa_ReadRegister(0x12));
 800090c:	2012      	movs	r0, #18
 800090e:	f7ff fef0 	bl	80006f2 <LoRa_ReadRegister>
 8000912:	4603      	mov	r3, r0
 8000914:	4619      	mov	r1, r3
 8000916:	4825      	ldr	r0, [pc, #148]	@ (80009ac <LoRa_SendText+0x14c>)
 8000918:	f001 ff86 	bl	8002828 <iprintf>
    	LoRa_DumpRegisters();
 800091c:	f000 f8d2 	bl	8000ac4 <LoRa_DumpRegisters>
    	HAL_Delay(2000);
 8000920:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000924:	f000 fc88 	bl	8001238 <HAL_Delay>
    while ((LoRa_ReadRegister(0x12) & 0x08) == 0) // TX_DONE = 0x08
 8000928:	2012      	movs	r0, #18
 800092a:	f7ff fee2 	bl	80006f2 <LoRa_ReadRegister>
 800092e:	4603      	mov	r3, r0
 8000930:	f003 0308 	and.w	r3, r3, #8
 8000934:	2b00      	cmp	r3, #0
 8000936:	d0e9      	beq.n	800090c <LoRa_SendText+0xac>
    };


    // 🐞 DEBUG: potwierdzenie zakończenia
    printf("TX done: Irq=0x%02X\r\n", LoRa_ReadRegister(0x12));
 8000938:	2012      	movs	r0, #18
 800093a:	f7ff feda 	bl	80006f2 <LoRa_ReadRegister>
 800093e:	4603      	mov	r3, r0
 8000940:	4619      	mov	r1, r3
 8000942:	481b      	ldr	r0, [pc, #108]	@ (80009b0 <LoRa_SendText+0x150>)
 8000944:	f001 ff70 	bl	8002828 <iprintf>

    for (int i = 0; i < 2; i++) {
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	e014      	b.n	8000978 <LoRa_SendText+0x118>
       		        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);   // zapal diodę
 800094e:	2201      	movs	r2, #1
 8000950:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000954:	4817      	ldr	r0, [pc, #92]	@ (80009b4 <LoRa_SendText+0x154>)
 8000956:	f000 ff41 	bl	80017dc <HAL_GPIO_WritePin>
       	            HAL_Delay(200);
 800095a:	20c8      	movs	r0, #200	@ 0xc8
 800095c:	f000 fc6c 	bl	8001238 <HAL_Delay>
       	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET); // zgaś diodę
 8000960:	2200      	movs	r2, #0
 8000962:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000966:	4813      	ldr	r0, [pc, #76]	@ (80009b4 <LoRa_SendText+0x154>)
 8000968:	f000 ff38 	bl	80017dc <HAL_GPIO_WritePin>
       	            HAL_Delay(200);
 800096c:	20c8      	movs	r0, #200	@ 0xc8
 800096e:	f000 fc63 	bl	8001238 <HAL_Delay>
    for (int i = 0; i < 2; i++) {
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	3301      	adds	r3, #1
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	2b01      	cmp	r3, #1
 800097c:	dde7      	ble.n	800094e <LoRa_SendText+0xee>
       	 }

    HAL_Delay(400);
 800097e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000982:	f000 fc59 	bl	8001238 <HAL_Delay>

    // 7. Wyczyść flagi IRQ
    LoRa_WriteRegister(0x12, 0xFF);
 8000986:	21ff      	movs	r1, #255	@ 0xff
 8000988:	2012      	movs	r0, #18
 800098a:	f7ff fe97 	bl	80006bc <LoRa_WriteRegister>

    // 8. Tryb RX (powrót)
    LoRa_WriteRegister(0x01, 0x85); // RX_CONTINUOUS
 800098e:	2185      	movs	r1, #133	@ 0x85
 8000990:	2001      	movs	r0, #1
 8000992:	f7ff fe93 	bl	80006bc <LoRa_WriteRegister>
}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bdb0      	pop	{r4, r5, r7, pc}
 800099e:	bf00      	nop
 80009a0:	080039cc 	.word	0x080039cc
 80009a4:	08003a00 	.word	0x08003a00
 80009a8:	08003a30 	.word	0x08003a30
 80009ac:	08003a68 	.word	0x08003a68
 80009b0:	08003a88 	.word	0x08003a88
 80009b4:	40020c00 	.word	0x40020c00

080009b8 <LoRa_ReportEvent>:
        return len;
    }
    return 0;
}

void LoRa_ReportEvent(void) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	@ 0x28
 80009bc:	af00      	add	r7, sp, #0
    uint8_t irqFlags = LoRa_ReadRegister(0x12);   // RegIrqFlags
 80009be:	2012      	movs	r0, #18
 80009c0:	f7ff fe97 	bl	80006f2 <LoRa_ReadRegister>
 80009c4:	4603      	mov	r3, r0
 80009c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    LoRa_WriteRegister(0x12, 0xFF);               // Skasuj flagi (1 = clear)
 80009ca:	21ff      	movs	r1, #255	@ 0xff
 80009cc:	2012      	movs	r0, #18
 80009ce:	f7ff fe75 	bl	80006bc <LoRa_WriteRegister>

    if (irqFlags & (1 << 6)) {
 80009d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d003      	beq.n	80009e6 <LoRa_ReportEvent+0x2e>
        LoRa_SendText("CRC ERROR\r\n");
 80009de:	4813      	ldr	r0, [pc, #76]	@ (8000a2c <LoRa_ReportEvent+0x74>)
 80009e0:	f7ff ff3e 	bl	8000860 <LoRa_SendText>
    } else {
        char msg[32];
        sprintf(msg, "IRQ Unknown: 0x%02X\r\n", irqFlags);
        LoRa_SendText(msg);
    }
}
 80009e4:	e01e      	b.n	8000a24 <LoRa_ReportEvent+0x6c>
    } else if (irqFlags & (1 << 3)) {
 80009e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009ea:	f003 0308 	and.w	r3, r3, #8
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d003      	beq.n	80009fa <LoRa_ReportEvent+0x42>
        LoRa_SendText("RX DONE\r\n");
 80009f2:	480f      	ldr	r0, [pc, #60]	@ (8000a30 <LoRa_ReportEvent+0x78>)
 80009f4:	f7ff ff34 	bl	8000860 <LoRa_SendText>
}
 80009f8:	e014      	b.n	8000a24 <LoRa_ReportEvent+0x6c>
    } else if (irqFlags & (1 << 0)) {
 80009fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d003      	beq.n	8000a0e <LoRa_ReportEvent+0x56>
        LoRa_SendText("TX DONE\r\n");
 8000a06:	480b      	ldr	r0, [pc, #44]	@ (8000a34 <LoRa_ReportEvent+0x7c>)
 8000a08:	f7ff ff2a 	bl	8000860 <LoRa_SendText>
}
 8000a0c:	e00a      	b.n	8000a24 <LoRa_ReportEvent+0x6c>
        sprintf(msg, "IRQ Unknown: 0x%02X\r\n", irqFlags);
 8000a0e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4908      	ldr	r1, [pc, #32]	@ (8000a38 <LoRa_ReportEvent+0x80>)
 8000a16:	4618      	mov	r0, r3
 8000a18:	f001 ff76 	bl	8002908 <siprintf>
        LoRa_SendText(msg);
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ff1e 	bl	8000860 <LoRa_SendText>
}
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	@ 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	08003aa0 	.word	0x08003aa0
 8000a30:	08003aac 	.word	0x08003aac
 8000a34:	08003ab8 	.word	0x08003ab8
 8000a38:	08003ac4 	.word	0x08003ac4

08000a3c <HAL_GPIO_EXTI_Callback>:
volatile uint8_t flag_error = 0;
volatile uint8_t flag_rx_done = 0;
volatile uint8_t lora_event_flag = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	80fb      	strh	r3, [r7, #6]
	int HUL_TEST = 1;
 8000a46:	2301      	movs	r3, #1
 8000a48:	60fb      	str	r3, [r7, #12]
    if (GPIO_Pin == SPI_interrupt_Pin) { // przerwanie od SX1278
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	2b04      	cmp	r3, #4
 8000a4e:	d12b      	bne.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x6c>
        uint8_t irqFlags = LoRa_ReadRegister(0x12);
 8000a50:	2012      	movs	r0, #18
 8000a52:	f7ff fe4e 	bl	80006f2 <LoRa_ReadRegister>
 8000a56:	4603      	mov	r3, r0
 8000a58:	72fb      	strb	r3, [r7, #11]

        if (irqFlags & 0x20) {  // CRC error
 8000a5a:	7afb      	ldrb	r3, [r7, #11]
 8000a5c:	f003 0320 	and.w	r3, r3, #32
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d00c      	beq.n	8000a7e <HAL_GPIO_EXTI_Callback+0x42>
            flag_error = 1;
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // zapal diodę
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a70:	4810      	ldr	r0, [pc, #64]	@ (8000ab4 <HAL_GPIO_EXTI_Callback+0x78>)
 8000a72:	f000 feb3 	bl	80017dc <HAL_GPIO_WritePin>
            // wysyłamy komunikat radiowy informujący o błędzie (jednorazowo)
            LoRa_SendText("ERROR: CRC");
 8000a76:	4810      	ldr	r0, [pc, #64]	@ (8000ab8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a78:	f7ff fef2 	bl	8000860 <LoRa_SendText>
 8000a7c:	e010      	b.n	8000aa0 <HAL_GPIO_EXTI_Callback+0x64>
        } else if (irqFlags & 0x40) { // Rx done
 8000a7e:	7afb      	ldrb	r3, [r7, #11]
 8000a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d00b      	beq.n	8000aa0 <HAL_GPIO_EXTI_Callback+0x64>
            flag_rx_done = 1;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <HAL_GPIO_EXTI_Callback+0x80>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET); // zgaś diodę
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a94:	4807      	ldr	r0, [pc, #28]	@ (8000ab4 <HAL_GPIO_EXTI_Callback+0x78>)
 8000a96:	f000 fea1 	bl	80017dc <HAL_GPIO_WritePin>
            // opcjonalnie potwierdzenie odebrania
            LoRa_SendText("RX_DONE");
 8000a9a:	4809      	ldr	r0, [pc, #36]	@ (8000ac0 <HAL_GPIO_EXTI_Callback+0x84>)
 8000a9c:	f7ff fee0 	bl	8000860 <LoRa_SendText>
        }

        LoRa_WriteRegister(0x12, 0xFF); // czyścimy przerwania
 8000aa0:	21ff      	movs	r1, #255	@ 0xff
 8000aa2:	2012      	movs	r0, #18
 8000aa4:	f7ff fe0a 	bl	80006bc <LoRa_WriteRegister>
    }
}
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200000dc 	.word	0x200000dc
 8000ab4:	40020c00 	.word	0x40020c00
 8000ab8:	08003adc 	.word	0x08003adc
 8000abc:	200000dd 	.word	0x200000dd
 8000ac0:	08003ae8 	.word	0x08003ae8

08000ac4 <LoRa_DumpRegisters>:

uint8_t reg_values[15];

void LoRa_DumpRegisters() {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
    printf("Version: 0x%02X\n", LoRa_ReadRegister(0x42));
 8000ac8:	2042      	movs	r0, #66	@ 0x42
 8000aca:	f7ff fe12 	bl	80006f2 <LoRa_ReadRegister>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4832      	ldr	r0, [pc, #200]	@ (8000b9c <LoRa_DumpRegisters+0xd8>)
 8000ad4:	f001 fea8 	bl	8002828 <iprintf>
    printf("OpMode: 0x%02X\n", LoRa_ReadRegister(0x01));
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f7ff fe0a 	bl	80006f2 <LoRa_ReadRegister>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	482f      	ldr	r0, [pc, #188]	@ (8000ba0 <LoRa_DumpRegisters+0xdc>)
 8000ae4:	f001 fea0 	bl	8002828 <iprintf>
    printf("RegFifoAddrPtr: 0x%02X\n", LoRa_ReadRegister(0x0D));
 8000ae8:	200d      	movs	r0, #13
 8000aea:	f7ff fe02 	bl	80006f2 <LoRa_ReadRegister>
 8000aee:	4603      	mov	r3, r0
 8000af0:	4619      	mov	r1, r3
 8000af2:	482c      	ldr	r0, [pc, #176]	@ (8000ba4 <LoRa_DumpRegisters+0xe0>)
 8000af4:	f001 fe98 	bl	8002828 <iprintf>
    printf("RegFifoTxBaseAddr: 0x%02X\n", LoRa_ReadRegister(0x0E));
 8000af8:	200e      	movs	r0, #14
 8000afa:	f7ff fdfa 	bl	80006f2 <LoRa_ReadRegister>
 8000afe:	4603      	mov	r3, r0
 8000b00:	4619      	mov	r1, r3
 8000b02:	4829      	ldr	r0, [pc, #164]	@ (8000ba8 <LoRa_DumpRegisters+0xe4>)
 8000b04:	f001 fe90 	bl	8002828 <iprintf>
    printf("RegPayloadLength: %d\n", LoRa_ReadRegister(0x22));
 8000b08:	2022      	movs	r0, #34	@ 0x22
 8000b0a:	f7ff fdf2 	bl	80006f2 <LoRa_ReadRegister>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	4619      	mov	r1, r3
 8000b12:	4826      	ldr	r0, [pc, #152]	@ (8000bac <LoRa_DumpRegisters+0xe8>)
 8000b14:	f001 fe88 	bl	8002828 <iprintf>
    printf("RegModemConfig1: 0x%02X\n", LoRa_ReadRegister(0x1D));
 8000b18:	201d      	movs	r0, #29
 8000b1a:	f7ff fdea 	bl	80006f2 <LoRa_ReadRegister>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	4619      	mov	r1, r3
 8000b22:	4823      	ldr	r0, [pc, #140]	@ (8000bb0 <LoRa_DumpRegisters+0xec>)
 8000b24:	f001 fe80 	bl	8002828 <iprintf>
    printf("RegModemConfig2: 0x%02X\n", LoRa_ReadRegister(0x1E));
 8000b28:	201e      	movs	r0, #30
 8000b2a:	f7ff fde2 	bl	80006f2 <LoRa_ReadRegister>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	4619      	mov	r1, r3
 8000b32:	4820      	ldr	r0, [pc, #128]	@ (8000bb4 <LoRa_DumpRegisters+0xf0>)
 8000b34:	f001 fe78 	bl	8002828 <iprintf>
    printf("RegModemConfig3: 0x%02X\n", LoRa_ReadRegister(0x26));
 8000b38:	2026      	movs	r0, #38	@ 0x26
 8000b3a:	f7ff fdda 	bl	80006f2 <LoRa_ReadRegister>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	4619      	mov	r1, r3
 8000b42:	481d      	ldr	r0, [pc, #116]	@ (8000bb8 <LoRa_DumpRegisters+0xf4>)
 8000b44:	f001 fe70 	bl	8002828 <iprintf>
    printf("Freq (MSB): 0x%02X\n", LoRa_ReadRegister(0x06));
 8000b48:	2006      	movs	r0, #6
 8000b4a:	f7ff fdd2 	bl	80006f2 <LoRa_ReadRegister>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4619      	mov	r1, r3
 8000b52:	481a      	ldr	r0, [pc, #104]	@ (8000bbc <LoRa_DumpRegisters+0xf8>)
 8000b54:	f001 fe68 	bl	8002828 <iprintf>
    printf("Freq (MID): 0x%02X\n", LoRa_ReadRegister(0x07));
 8000b58:	2007      	movs	r0, #7
 8000b5a:	f7ff fdca 	bl	80006f2 <LoRa_ReadRegister>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	4619      	mov	r1, r3
 8000b62:	4817      	ldr	r0, [pc, #92]	@ (8000bc0 <LoRa_DumpRegisters+0xfc>)
 8000b64:	f001 fe60 	bl	8002828 <iprintf>
    printf("Freq (LSB): 0x%02X\n", LoRa_ReadRegister(0x08));
 8000b68:	2008      	movs	r0, #8
 8000b6a:	f7ff fdc2 	bl	80006f2 <LoRa_ReadRegister>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	4619      	mov	r1, r3
 8000b72:	4814      	ldr	r0, [pc, #80]	@ (8000bc4 <LoRa_DumpRegisters+0x100>)
 8000b74:	f001 fe58 	bl	8002828 <iprintf>
    printf("PaConfig: 0x%02X\n", LoRa_ReadRegister(0x09));
 8000b78:	2009      	movs	r0, #9
 8000b7a:	f7ff fdba 	bl	80006f2 <LoRa_ReadRegister>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4619      	mov	r1, r3
 8000b82:	4811      	ldr	r0, [pc, #68]	@ (8000bc8 <LoRa_DumpRegisters+0x104>)
 8000b84:	f001 fe50 	bl	8002828 <iprintf>
    printf("IrqFlags: 0x%02X\n", LoRa_ReadRegister(0x12));
 8000b88:	2012      	movs	r0, #18
 8000b8a:	f7ff fdb2 	bl	80006f2 <LoRa_ReadRegister>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	4619      	mov	r1, r3
 8000b92:	480e      	ldr	r0, [pc, #56]	@ (8000bcc <LoRa_DumpRegisters+0x108>)
 8000b94:	f001 fe48 	bl	8002828 <iprintf>
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	08003af0 	.word	0x08003af0
 8000ba0:	08003b04 	.word	0x08003b04
 8000ba4:	08003b14 	.word	0x08003b14
 8000ba8:	08003b2c 	.word	0x08003b2c
 8000bac:	08003b48 	.word	0x08003b48
 8000bb0:	08003b60 	.word	0x08003b60
 8000bb4:	08003b7c 	.word	0x08003b7c
 8000bb8:	08003b98 	.word	0x08003b98
 8000bbc:	08003bb4 	.word	0x08003bb4
 8000bc0:	08003bc8 	.word	0x08003bc8
 8000bc4:	08003bdc 	.word	0x08003bdc
 8000bc8:	08003bf0 	.word	0x08003bf0
 8000bcc:	08003c04 	.word	0x08003c04

08000bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd4:	f000 fabe 	bl	8001154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd8:	f000 f81e 	bl	8000c18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bdc:	f000 f8b0 	bl	8000d40 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000be0:	f000 f878 	bl	8000cd4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  LoRa_Init();  // konfigurujesz po resecie, nie przed
 8000be4:	f7ff fda0 	bl	8000728 <LoRa_Init>


  LoRa_DumpRegisters();
 8000be8:	f7ff ff6c 	bl	8000ac4 <LoRa_DumpRegisters>
//  LoRa_DumpRegisters();

  while (1)
  {

	  if (lora_event_flag) {
 8000bec:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <main+0x40>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d004      	beq.n	8000c00 <main+0x30>
	      lora_event_flag = 0;
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <main+0x40>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
	      LoRa_ReportEvent();  // odczytaj rejestr i wyślij informację do PC
 8000bfc:	f7ff fedc 	bl	80009b8 <LoRa_ReportEvent>

	        // }



	   LoRa_SendText("MENU:\n");
 8000c00:	4804      	ldr	r0, [pc, #16]	@ (8000c14 <main+0x44>)
 8000c02:	f7ff fe2d 	bl	8000860 <LoRa_SendText>



	             HAL_Delay(2000);
 8000c06:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c0a:	f000 fb15 	bl	8001238 <HAL_Delay>
	  if (lora_event_flag) {
 8000c0e:	e7ed      	b.n	8000bec <main+0x1c>
 8000c10:	200000de 	.word	0x200000de
 8000c14:	08003c18 	.word	0x08003c18

08000c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b094      	sub	sp, #80	@ 0x50
 8000c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1e:	f107 0320 	add.w	r3, r7, #32
 8000c22:	2230      	movs	r2, #48	@ 0x30
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f001 ff68 	bl	8002afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	4b22      	ldr	r3, [pc, #136]	@ (8000ccc <SystemClock_Config+0xb4>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c44:	4a21      	ldr	r2, [pc, #132]	@ (8000ccc <SystemClock_Config+0xb4>)
 8000c46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ccc <SystemClock_Config+0xb4>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c58:	2300      	movs	r3, #0
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <SystemClock_Config+0xb8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd0 <SystemClock_Config+0xb8>)
 8000c62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c66:	6013      	str	r3, [r2, #0]
 8000c68:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <SystemClock_Config+0xb8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c74:	2302      	movs	r3, #2
 8000c76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c7c:	2310      	movs	r3, #16
 8000c7e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c84:	f107 0320 	add.w	r3, r7, #32
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 fdd9 	bl	8001840 <HAL_RCC_OscConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000c94:	f000 f8ee 	bl	8000e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c98:	230f      	movs	r3, #15
 8000c9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f001 f83c 	bl	8001d30 <HAL_RCC_ClockConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000cbe:	f000 f8d9 	bl	8000e74 <Error_Handler>
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	3750      	adds	r7, #80	@ 0x50
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40007000 	.word	0x40007000

08000cd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cd8:	4b17      	ldr	r3, [pc, #92]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000cda:	4a18      	ldr	r2, [pc, #96]	@ (8000d3c <MX_SPI1_Init+0x68>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cde:	4b16      	ldr	r3, [pc, #88]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000ce0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ce4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cec:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000d00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d06:	4b0c      	ldr	r3, [pc, #48]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000d08:	2210      	movs	r2, #16
 8000d0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d12:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d18:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000d20:	220a      	movs	r2, #10
 8000d22:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d24:	4804      	ldr	r0, [pc, #16]	@ (8000d38 <MX_SPI1_Init+0x64>)
 8000d26:	f001 f9af 	bl	8002088 <HAL_SPI_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d30:	f000 f8a0 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000084 	.word	0x20000084
 8000d3c:	40013000 	.word	0x40013000

08000d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	@ 0x28
 8000d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b42      	ldr	r3, [pc, #264]	@ (8000e64 <MX_GPIO_Init+0x124>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4a41      	ldr	r2, [pc, #260]	@ (8000e64 <MX_GPIO_Init+0x124>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d66:	4b3f      	ldr	r3, [pc, #252]	@ (8000e64 <MX_GPIO_Init+0x124>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b3b      	ldr	r3, [pc, #236]	@ (8000e64 <MX_GPIO_Init+0x124>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a3a      	ldr	r2, [pc, #232]	@ (8000e64 <MX_GPIO_Init+0x124>)
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b38      	ldr	r3, [pc, #224]	@ (8000e64 <MX_GPIO_Init+0x124>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f003 0304 	and.w	r3, r3, #4
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	4b34      	ldr	r3, [pc, #208]	@ (8000e64 <MX_GPIO_Init+0x124>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	4a33      	ldr	r2, [pc, #204]	@ (8000e64 <MX_GPIO_Init+0x124>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9e:	4b31      	ldr	r3, [pc, #196]	@ (8000e64 <MX_GPIO_Init+0x124>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	4b2d      	ldr	r3, [pc, #180]	@ (8000e64 <MX_GPIO_Init+0x124>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	4a2c      	ldr	r2, [pc, #176]	@ (8000e64 <MX_GPIO_Init+0x124>)
 8000db4:	f043 0308 	orr.w	r3, r3, #8
 8000db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dba:	4b2a      	ldr	r3, [pc, #168]	@ (8000e64 <MX_GPIO_Init+0x124>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	f003 0308 	and.w	r3, r3, #8
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|SPI_Reset_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2130      	movs	r1, #48	@ 0x30
 8000dca:	4827      	ldr	r0, [pc, #156]	@ (8000e68 <MX_GPIO_Init+0x128>)
 8000dcc:	f000 fd06 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D_callback_orange_GPIO_Port, D_callback_orange_Pin, GPIO_PIN_RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dd6:	4825      	ldr	r0, [pc, #148]	@ (8000e6c <MX_GPIO_Init+0x12c>)
 8000dd8:	f000 fd00 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000ddc:	2310      	movs	r3, #16
 8000dde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000de8:	2301      	movs	r3, #1
 8000dea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	481d      	ldr	r0, [pc, #116]	@ (8000e68 <MX_GPIO_Init+0x128>)
 8000df4:	f000 fb56 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_Reset_Pin */
  GPIO_InitStruct.Pin = SPI_Reset_Pin;
 8000df8:	2320      	movs	r3, #32
 8000dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_Reset_GPIO_Port, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4816      	ldr	r0, [pc, #88]	@ (8000e68 <MX_GPIO_Init+0x128>)
 8000e10:	f000 fb48 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_interrupt_Pin */
  GPIO_InitStruct.Pin = SPI_interrupt_Pin;
 8000e14:	2304      	movs	r3, #4
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e18:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_interrupt_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	4811      	ldr	r0, [pc, #68]	@ (8000e70 <MX_GPIO_Init+0x130>)
 8000e2a:	f000 fb3b 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : D_callback_orange_Pin */
  GPIO_InitStruct.Pin = D_callback_orange_Pin;
 8000e2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D_callback_orange_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	4809      	ldr	r0, [pc, #36]	@ (8000e6c <MX_GPIO_Init+0x12c>)
 8000e48:	f000 fb2c 	bl	80014a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2008      	movs	r0, #8
 8000e52:	f000 faf0 	bl	8001436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000e56:	2008      	movs	r0, #8
 8000e58:	f000 fb09 	bl	800146e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e5c:	bf00      	nop
 8000e5e:	3728      	adds	r7, #40	@ 0x28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020800 	.word	0x40020800
 8000e6c:	40020c00 	.word	0x40020c00
 8000e70:	40020400 	.word	0x40020400

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <Error_Handler+0x8>

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e96:	4b0d      	ldr	r3, [pc, #52]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eaa:	4a08      	ldr	r2, [pc, #32]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800

08000ed0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	@ 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a19      	ldr	r2, [pc, #100]	@ (8000f54 <HAL_SPI_MspInit+0x84>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d12b      	bne.n	8000f4a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b18      	ldr	r3, [pc, #96]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efa:	4a17      	ldr	r2, [pc, #92]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000efc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f02:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	4a10      	ldr	r2, [pc, #64]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f2a:	23e0      	movs	r3, #224	@ 0xe0
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <HAL_SPI_MspInit+0x8c>)
 8000f46:	f000 faad 	bl	80014a4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000f4a:	bf00      	nop
 8000f4c:	3728      	adds	r7, #40	@ 0x28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40013000 	.word	0x40013000
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020000 	.word	0x40020000

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <NMI_Handler+0x4>

08000f68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <HardFault_Handler+0x4>

08000f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <MemManage_Handler+0x4>

08000f78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb6:	f000 f91f 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI_interrupt_Pin);
 8000fc2:	2004      	movs	r0, #4
 8000fc4:	f000 fc24 	bl	8001810 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	e00a      	b.n	8000ff4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fde:	f3af 8000 	nop.w
 8000fe2:	4601      	mov	r1, r0
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	60ba      	str	r2, [r7, #8]
 8000fea:	b2ca      	uxtb	r2, r1
 8000fec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	dbf0      	blt.n	8000fde <_read+0x12>
  }

  return len;
 8000ffc:	687b      	ldr	r3, [r7, #4]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800102e:	605a      	str	r2, [r3, #4]
  return 0;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <_isatty>:

int _isatty(int file)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001046:	2301      	movs	r3, #1
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001078:	4a14      	ldr	r2, [pc, #80]	@ (80010cc <_sbrk+0x5c>)
 800107a:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <_sbrk+0x60>)
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001084:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d102      	bne.n	8001092 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800108c:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <_sbrk+0x64>)
 800108e:	4a12      	ldr	r2, [pc, #72]	@ (80010d8 <_sbrk+0x68>)
 8001090:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001092:	4b10      	ldr	r3, [pc, #64]	@ (80010d4 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	429a      	cmp	r2, r3
 800109e:	d207      	bcs.n	80010b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a0:	f001 fd7a 	bl	8002b98 <__errno>
 80010a4:	4603      	mov	r3, r0
 80010a6:	220c      	movs	r2, #12
 80010a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	e009      	b.n	80010c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b0:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010b6:	4b07      	ldr	r3, [pc, #28]	@ (80010d4 <_sbrk+0x64>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	4a05      	ldr	r2, [pc, #20]	@ (80010d4 <_sbrk+0x64>)
 80010c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010c2:	68fb      	ldr	r3, [r7, #12]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20020000 	.word	0x20020000
 80010d0:	00000400 	.word	0x00000400
 80010d4:	200000e0 	.word	0x200000e0
 80010d8:	20000238 	.word	0x20000238

080010dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <SystemInit+0x20>)
 80010e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010e6:	4a05      	ldr	r2, [pc, #20]	@ (80010fc <SystemInit+0x20>)
 80010e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001100:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001138 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001104:	f7ff ffea 	bl	80010dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001108:	480c      	ldr	r0, [pc, #48]	@ (800113c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800110a:	490d      	ldr	r1, [pc, #52]	@ (8001140 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800110c:	4a0d      	ldr	r2, [pc, #52]	@ (8001144 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001120:	4c0a      	ldr	r4, [pc, #40]	@ (800114c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800112e:	f001 fd39 	bl	8002ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001132:	f7ff fd4d 	bl	8000bd0 <main>
  bx  lr    
 8001136:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001138:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800113c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001140:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001144:	08003c74 	.word	0x08003c74
  ldr r2, =_sbss
 8001148:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800114c:	20000234 	.word	0x20000234

08001150 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001150:	e7fe      	b.n	8001150 <ADC_IRQHandler>
	...

08001154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001158:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <HAL_Init+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0d      	ldr	r2, [pc, #52]	@ (8001194 <HAL_Init+0x40>)
 800115e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001162:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001164:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <HAL_Init+0x40>)
 800116a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800116e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001170:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <HAL_Init+0x40>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a07      	ldr	r2, [pc, #28]	@ (8001194 <HAL_Init+0x40>)
 8001176:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800117a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117c:	2003      	movs	r0, #3
 800117e:	f000 f94f 	bl	8001420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001182:	200f      	movs	r0, #15
 8001184:	f000 f808 	bl	8001198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001188:	f7ff fe7a 	bl	8000e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40023c00 	.word	0x40023c00

08001198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a0:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <HAL_InitTick+0x54>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <HAL_InitTick+0x58>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f967 	bl	800148a <HAL_SYSTICK_Config>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00e      	b.n	80011e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d80a      	bhi.n	80011e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011cc:	2200      	movs	r2, #0
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f000 f92f 	bl	8001436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d8:	4a06      	ldr	r2, [pc, #24]	@ (80011f4 <HAL_InitTick+0x5c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e000      	b.n	80011e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000000 	.word	0x20000000
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000004 	.word	0x20000004

080011f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <HAL_IncTick+0x20>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <HAL_IncTick+0x24>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a04      	ldr	r2, [pc, #16]	@ (800121c <HAL_IncTick+0x24>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000008 	.word	0x20000008
 800121c:	200000e4 	.word	0x200000e4

08001220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b03      	ldr	r3, [pc, #12]	@ (8001234 <HAL_GetTick+0x14>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	200000e4 	.word	0x200000e4

08001238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001240:	f7ff ffee 	bl	8001220 <HAL_GetTick>
 8001244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001250:	d005      	beq.n	800125e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001252:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <HAL_Delay+0x44>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4413      	add	r3, r2
 800125c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800125e:	bf00      	nop
 8001260:	f7ff ffde 	bl	8001220 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	429a      	cmp	r2, r3
 800126e:	d8f7      	bhi.n	8001260 <HAL_Delay+0x28>
  {
  }
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000008 	.word	0x20000008

08001280 <__NVIC_SetPriorityGrouping>:
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001290:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800129c:	4013      	ands	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b2:	4a04      	ldr	r2, [pc, #16]	@ (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	60d3      	str	r3, [r2, #12]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_GetPriorityGrouping>:
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012cc:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	f003 0307 	and.w	r3, r3, #7
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_EnableIRQ>:
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	db0b      	blt.n	800130e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	f003 021f 	and.w	r2, r3, #31
 80012fc:	4907      	ldr	r1, [pc, #28]	@ (800131c <__NVIC_EnableIRQ+0x38>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	095b      	lsrs	r3, r3, #5
 8001304:	2001      	movs	r0, #1
 8001306:	fa00 f202 	lsl.w	r2, r0, r2
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000e100 	.word	0xe000e100

08001320 <__NVIC_SetPriority>:
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	@ (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	@ (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	@ 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	@ 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <SysTick_Config>:
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013ec:	d301      	bcc.n	80013f2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00f      	b.n	8001412 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f2:	4a0a      	ldr	r2, [pc, #40]	@ (800141c <SysTick_Config+0x40>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fa:	210f      	movs	r1, #15
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f7ff ff8e 	bl	8001320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001404:	4b05      	ldr	r3, [pc, #20]	@ (800141c <SysTick_Config+0x40>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140a:	4b04      	ldr	r3, [pc, #16]	@ (800141c <SysTick_Config+0x40>)
 800140c:	2207      	movs	r2, #7
 800140e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	e000e010 	.word	0xe000e010

08001420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff29 	bl	8001280 <__NVIC_SetPriorityGrouping>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001448:	f7ff ff3e 	bl	80012c8 <__NVIC_GetPriorityGrouping>
 800144c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	68b9      	ldr	r1, [r7, #8]
 8001452:	6978      	ldr	r0, [r7, #20]
 8001454:	f7ff ff8e 	bl	8001374 <NVIC_EncodePriority>
 8001458:	4602      	mov	r2, r0
 800145a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff5d 	bl	8001320 <__NVIC_SetPriority>
}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff31 	bl	80012e4 <__NVIC_EnableIRQ>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffa2 	bl	80013dc <SysTick_Config>
 8001498:	4603      	mov	r3, r0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	@ 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
 80014be:	e16b      	b.n	8001798 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014c0:	2201      	movs	r2, #1
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	429a      	cmp	r2, r3
 80014da:	f040 815a 	bne.w	8001792 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d005      	beq.n	80014f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d130      	bne.n	8001558 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	2203      	movs	r2, #3
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800152c:	2201      	movs	r2, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	091b      	lsrs	r3, r3, #4
 8001542:	f003 0201 	and.w	r2, r3, #1
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b03      	cmp	r3, #3
 8001562:	d017      	beq.n	8001594 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	2203      	movs	r2, #3
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d123      	bne.n	80015e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	08da      	lsrs	r2, r3, #3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3208      	adds	r2, #8
 80015a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	220f      	movs	r2, #15
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	691a      	ldr	r2, [r3, #16]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	08da      	lsrs	r2, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3208      	adds	r2, #8
 80015e2:	69b9      	ldr	r1, [r7, #24]
 80015e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	2203      	movs	r2, #3
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0203 	and.w	r2, r3, #3
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80b4 	beq.w	8001792 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b60      	ldr	r3, [pc, #384]	@ (80017b0 <HAL_GPIO_Init+0x30c>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001632:	4a5f      	ldr	r2, [pc, #380]	@ (80017b0 <HAL_GPIO_Init+0x30c>)
 8001634:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001638:	6453      	str	r3, [r2, #68]	@ 0x44
 800163a:	4b5d      	ldr	r3, [pc, #372]	@ (80017b0 <HAL_GPIO_Init+0x30c>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001646:	4a5b      	ldr	r2, [pc, #364]	@ (80017b4 <HAL_GPIO_Init+0x310>)
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	089b      	lsrs	r3, r3, #2
 800164c:	3302      	adds	r3, #2
 800164e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	220f      	movs	r2, #15
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a52      	ldr	r2, [pc, #328]	@ (80017b8 <HAL_GPIO_Init+0x314>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d02b      	beq.n	80016ca <HAL_GPIO_Init+0x226>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a51      	ldr	r2, [pc, #324]	@ (80017bc <HAL_GPIO_Init+0x318>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d025      	beq.n	80016c6 <HAL_GPIO_Init+0x222>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a50      	ldr	r2, [pc, #320]	@ (80017c0 <HAL_GPIO_Init+0x31c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d01f      	beq.n	80016c2 <HAL_GPIO_Init+0x21e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a4f      	ldr	r2, [pc, #316]	@ (80017c4 <HAL_GPIO_Init+0x320>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d019      	beq.n	80016be <HAL_GPIO_Init+0x21a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a4e      	ldr	r2, [pc, #312]	@ (80017c8 <HAL_GPIO_Init+0x324>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d013      	beq.n	80016ba <HAL_GPIO_Init+0x216>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a4d      	ldr	r2, [pc, #308]	@ (80017cc <HAL_GPIO_Init+0x328>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d00d      	beq.n	80016b6 <HAL_GPIO_Init+0x212>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a4c      	ldr	r2, [pc, #304]	@ (80017d0 <HAL_GPIO_Init+0x32c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d007      	beq.n	80016b2 <HAL_GPIO_Init+0x20e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4b      	ldr	r2, [pc, #300]	@ (80017d4 <HAL_GPIO_Init+0x330>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d101      	bne.n	80016ae <HAL_GPIO_Init+0x20a>
 80016aa:	2307      	movs	r3, #7
 80016ac:	e00e      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016ae:	2308      	movs	r3, #8
 80016b0:	e00c      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016b2:	2306      	movs	r3, #6
 80016b4:	e00a      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016b6:	2305      	movs	r3, #5
 80016b8:	e008      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016ba:	2304      	movs	r3, #4
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016be:	2303      	movs	r3, #3
 80016c0:	e004      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e002      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016ca:	2300      	movs	r3, #0
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	f002 0203 	and.w	r2, r2, #3
 80016d2:	0092      	lsls	r2, r2, #2
 80016d4:	4093      	lsls	r3, r2
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016dc:	4935      	ldr	r1, [pc, #212]	@ (80017b4 <HAL_GPIO_Init+0x310>)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ea:	4b3b      	ldr	r3, [pc, #236]	@ (80017d8 <HAL_GPIO_Init+0x334>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800170e:	4a32      	ldr	r2, [pc, #200]	@ (80017d8 <HAL_GPIO_Init+0x334>)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001714:	4b30      	ldr	r3, [pc, #192]	@ (80017d8 <HAL_GPIO_Init+0x334>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001738:	4a27      	ldr	r2, [pc, #156]	@ (80017d8 <HAL_GPIO_Init+0x334>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800173e:	4b26      	ldr	r3, [pc, #152]	@ (80017d8 <HAL_GPIO_Init+0x334>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001762:	4a1d      	ldr	r2, [pc, #116]	@ (80017d8 <HAL_GPIO_Init+0x334>)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001768:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <HAL_GPIO_Init+0x334>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800178c:	4a12      	ldr	r2, [pc, #72]	@ (80017d8 <HAL_GPIO_Init+0x334>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3301      	adds	r3, #1
 8001796:	61fb      	str	r3, [r7, #28]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	2b0f      	cmp	r3, #15
 800179c:	f67f ae90 	bls.w	80014c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3724      	adds	r7, #36	@ 0x24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40013800 	.word	0x40013800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020400 	.word	0x40020400
 80017c0:	40020800 	.word	0x40020800
 80017c4:	40020c00 	.word	0x40020c00
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40021400 	.word	0x40021400
 80017d0:	40021800 	.word	0x40021800
 80017d4:	40021c00 	.word	0x40021c00
 80017d8:	40013c00 	.word	0x40013c00

080017dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	807b      	strh	r3, [r7, #2]
 80017e8:	4613      	mov	r3, r2
 80017ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017ec:	787b      	ldrb	r3, [r7, #1]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017f2:	887a      	ldrh	r2, [r7, #2]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017f8:	e003      	b.n	8001802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017fa:	887b      	ldrh	r3, [r7, #2]
 80017fc:	041a      	lsls	r2, r3, #16
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	619a      	str	r2, [r3, #24]
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800181a:	4b08      	ldr	r3, [pc, #32]	@ (800183c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	4013      	ands	r3, r2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d006      	beq.n	8001834 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001826:	4a05      	ldr	r2, [pc, #20]	@ (800183c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff f904 	bl	8000a3c <HAL_GPIO_EXTI_Callback>
  }
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40013c00 	.word	0x40013c00

08001840 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e267      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d075      	beq.n	800194a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800185e:	4b88      	ldr	r3, [pc, #544]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	2b04      	cmp	r3, #4
 8001868:	d00c      	beq.n	8001884 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800186a:	4b85      	ldr	r3, [pc, #532]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001872:	2b08      	cmp	r3, #8
 8001874:	d112      	bne.n	800189c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001876:	4b82      	ldr	r3, [pc, #520]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800187e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001882:	d10b      	bne.n	800189c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001884:	4b7e      	ldr	r3, [pc, #504]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d05b      	beq.n	8001948 <HAL_RCC_OscConfig+0x108>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d157      	bne.n	8001948 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e242      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018a4:	d106      	bne.n	80018b4 <HAL_RCC_OscConfig+0x74>
 80018a6:	4b76      	ldr	r3, [pc, #472]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a75      	ldr	r2, [pc, #468]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80018ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e01d      	b.n	80018f0 <HAL_RCC_OscConfig+0xb0>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x98>
 80018be:	4b70      	ldr	r3, [pc, #448]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a6f      	ldr	r2, [pc, #444]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80018c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	4b6d      	ldr	r3, [pc, #436]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a6c      	ldr	r2, [pc, #432]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80018d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e00b      	b.n	80018f0 <HAL_RCC_OscConfig+0xb0>
 80018d8:	4b69      	ldr	r3, [pc, #420]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a68      	ldr	r2, [pc, #416]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80018de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	4b66      	ldr	r3, [pc, #408]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a65      	ldr	r2, [pc, #404]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80018ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d013      	beq.n	8001920 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff fc92 	bl	8001220 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001900:	f7ff fc8e 	bl	8001220 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	@ 0x64
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e207      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	4b5b      	ldr	r3, [pc, #364]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0xc0>
 800191e:	e014      	b.n	800194a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff fc7e 	bl	8001220 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff fc7a 	bl	8001220 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	@ 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e1f3      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193a:	4b51      	ldr	r3, [pc, #324]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0xe8>
 8001946:	e000      	b.n	800194a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d063      	beq.n	8001a1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001956:	4b4a      	ldr	r3, [pc, #296]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00b      	beq.n	800197a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001962:	4b47      	ldr	r3, [pc, #284]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800196a:	2b08      	cmp	r3, #8
 800196c:	d11c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800196e:	4b44      	ldr	r3, [pc, #272]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d116      	bne.n	80019a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197a:	4b41      	ldr	r3, [pc, #260]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d005      	beq.n	8001992 <HAL_RCC_OscConfig+0x152>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d001      	beq.n	8001992 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e1c7      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001992:	4b3b      	ldr	r3, [pc, #236]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4937      	ldr	r1, [pc, #220]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a6:	e03a      	b.n	8001a1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d020      	beq.n	80019f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b0:	4b34      	ldr	r3, [pc, #208]	@ (8001a84 <HAL_RCC_OscConfig+0x244>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b6:	f7ff fc33 	bl	8001220 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019be:	f7ff fc2f 	bl	8001220 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e1a8      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019dc:	4b28      	ldr	r3, [pc, #160]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	4925      	ldr	r1, [pc, #148]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	600b      	str	r3, [r1, #0]
 80019f0:	e015      	b.n	8001a1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019f2:	4b24      	ldr	r3, [pc, #144]	@ (8001a84 <HAL_RCC_OscConfig+0x244>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7ff fc12 	bl	8001220 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a00:	f7ff fc0e 	bl	8001220 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e187      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a12:	4b1b      	ldr	r3, [pc, #108]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d036      	beq.n	8001a98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d016      	beq.n	8001a60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <HAL_RCC_OscConfig+0x248>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a38:	f7ff fbf2 	bl	8001220 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a40:	f7ff fbee 	bl	8001220 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e167      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a52:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 8001a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x200>
 8001a5e:	e01b      	b.n	8001a98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a60:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <HAL_RCC_OscConfig+0x248>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a66:	f7ff fbdb 	bl	8001220 <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a6c:	e00e      	b.n	8001a8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a6e:	f7ff fbd7 	bl	8001220 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d907      	bls.n	8001a8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e150      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
 8001a80:	40023800 	.word	0x40023800
 8001a84:	42470000 	.word	0x42470000
 8001a88:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a8c:	4b88      	ldr	r3, [pc, #544]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1ea      	bne.n	8001a6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 8097 	beq.w	8001bd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aaa:	4b81      	ldr	r3, [pc, #516]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10f      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	4b7d      	ldr	r3, [pc, #500]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	4a7c      	ldr	r2, [pc, #496]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac6:	4b7a      	ldr	r3, [pc, #488]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad6:	4b77      	ldr	r3, [pc, #476]	@ (8001cb4 <HAL_RCC_OscConfig+0x474>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d118      	bne.n	8001b14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ae2:	4b74      	ldr	r3, [pc, #464]	@ (8001cb4 <HAL_RCC_OscConfig+0x474>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a73      	ldr	r2, [pc, #460]	@ (8001cb4 <HAL_RCC_OscConfig+0x474>)
 8001ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aee:	f7ff fb97 	bl	8001220 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af6:	f7ff fb93 	bl	8001220 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e10c      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b08:	4b6a      	ldr	r3, [pc, #424]	@ (8001cb4 <HAL_RCC_OscConfig+0x474>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d106      	bne.n	8001b2a <HAL_RCC_OscConfig+0x2ea>
 8001b1c:	4b64      	ldr	r3, [pc, #400]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b20:	4a63      	ldr	r2, [pc, #396]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b28:	e01c      	b.n	8001b64 <HAL_RCC_OscConfig+0x324>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b05      	cmp	r3, #5
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x30c>
 8001b32:	4b5f      	ldr	r3, [pc, #380]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b36:	4a5e      	ldr	r2, [pc, #376]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001b38:	f043 0304 	orr.w	r3, r3, #4
 8001b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b3e:	4b5c      	ldr	r3, [pc, #368]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b42:	4a5b      	ldr	r2, [pc, #364]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b4a:	e00b      	b.n	8001b64 <HAL_RCC_OscConfig+0x324>
 8001b4c:	4b58      	ldr	r3, [pc, #352]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b50:	4a57      	ldr	r2, [pc, #348]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001b52:	f023 0301 	bic.w	r3, r3, #1
 8001b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b58:	4b55      	ldr	r3, [pc, #340]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5c:	4a54      	ldr	r2, [pc, #336]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001b5e:	f023 0304 	bic.w	r3, r3, #4
 8001b62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d015      	beq.n	8001b98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6c:	f7ff fb58 	bl	8001220 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b74:	f7ff fb54 	bl	8001220 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e0cb      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8a:	4b49      	ldr	r3, [pc, #292]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0ee      	beq.n	8001b74 <HAL_RCC_OscConfig+0x334>
 8001b96:	e014      	b.n	8001bc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b98:	f7ff fb42 	bl	8001220 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b9e:	e00a      	b.n	8001bb6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba0:	f7ff fb3e 	bl	8001220 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e0b5      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1ee      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bc2:	7dfb      	ldrb	r3, [r7, #23]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d105      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc8:	4b39      	ldr	r3, [pc, #228]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	4a38      	ldr	r2, [pc, #224]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001bce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bd2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 80a1 	beq.w	8001d20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bde:	4b34      	ldr	r3, [pc, #208]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d05c      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d141      	bne.n	8001c76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf2:	4b31      	ldr	r3, [pc, #196]	@ (8001cb8 <HAL_RCC_OscConfig+0x478>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fb12 	bl	8001220 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c00:	f7ff fb0e 	bl	8001220 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e087      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c12:	4b27      	ldr	r3, [pc, #156]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69da      	ldr	r2, [r3, #28]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2c:	019b      	lsls	r3, r3, #6
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c34:	085b      	lsrs	r3, r3, #1
 8001c36:	3b01      	subs	r3, #1
 8001c38:	041b      	lsls	r3, r3, #16
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c40:	061b      	lsls	r3, r3, #24
 8001c42:	491b      	ldr	r1, [pc, #108]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c48:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb8 <HAL_RCC_OscConfig+0x478>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4e:	f7ff fae7 	bl	8001220 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c56:	f7ff fae3 	bl	8001220 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e05c      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c68:	4b11      	ldr	r3, [pc, #68]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x416>
 8001c74:	e054      	b.n	8001d20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c76:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <HAL_RCC_OscConfig+0x478>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fad0 	bl	8001220 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c84:	f7ff facc 	bl	8001220 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e045      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c96:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0x444>
 8001ca2:	e03d      	b.n	8001d20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d107      	bne.n	8001cbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e038      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40007000 	.word	0x40007000
 8001cb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d2c <HAL_RCC_OscConfig+0x4ec>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d028      	beq.n	8001d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d121      	bne.n	8001d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d11a      	bne.n	8001d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001cec:	4013      	ands	r3, r2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d111      	bne.n	8001d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d02:	085b      	lsrs	r3, r3, #1
 8001d04:	3b01      	subs	r3, #1
 8001d06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d107      	bne.n	8001d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d001      	beq.n	8001d20 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e000      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800

08001d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0cc      	b.n	8001ede <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d44:	4b68      	ldr	r3, [pc, #416]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d90c      	bls.n	8001d6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b65      	ldr	r3, [pc, #404]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5a:	4b63      	ldr	r3, [pc, #396]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0b8      	b.n	8001ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d020      	beq.n	8001dba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d84:	4b59      	ldr	r3, [pc, #356]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	4a58      	ldr	r2, [pc, #352]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d9c:	4b53      	ldr	r3, [pc, #332]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	4a52      	ldr	r2, [pc, #328]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001da6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da8:	4b50      	ldr	r3, [pc, #320]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	494d      	ldr	r1, [pc, #308]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d044      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dce:	4b47      	ldr	r3, [pc, #284]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d119      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e07f      	b.n	8001ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d003      	beq.n	8001dee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d107      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dee:	4b3f      	ldr	r3, [pc, #252]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d109      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e06f      	b.n	8001ede <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e067      	b.n	8001ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e0e:	4b37      	ldr	r3, [pc, #220]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f023 0203 	bic.w	r2, r3, #3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4934      	ldr	r1, [pc, #208]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e20:	f7ff f9fe 	bl	8001220 <HAL_GetTick>
 8001e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e26:	e00a      	b.n	8001e3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e28:	f7ff f9fa 	bl	8001220 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e04f      	b.n	8001ede <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 020c 	and.w	r2, r3, #12
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d1eb      	bne.n	8001e28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e50:	4b25      	ldr	r3, [pc, #148]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d20c      	bcs.n	8001e78 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5e:	4b22      	ldr	r3, [pc, #136]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e66:	4b20      	ldr	r3, [pc, #128]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d001      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e032      	b.n	8001ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d008      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e84:	4b19      	ldr	r3, [pc, #100]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4916      	ldr	r1, [pc, #88]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d009      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ea2:	4b12      	ldr	r3, [pc, #72]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	490e      	ldr	r1, [pc, #56]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eb6:	f000 f821 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	490a      	ldr	r1, [pc, #40]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	5ccb      	ldrb	r3, [r1, r3]
 8001eca:	fa22 f303 	lsr.w	r3, r2, r3
 8001ece:	4a09      	ldr	r2, [pc, #36]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ed2:	4b09      	ldr	r3, [pc, #36]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff f95e 	bl	8001198 <HAL_InitTick>

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40023c00 	.word	0x40023c00
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	08003c20 	.word	0x08003c20
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	20000004 	.word	0x20000004

08001efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f00:	b090      	sub	sp, #64	@ 0x40
 8001f02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f14:	4b59      	ldr	r3, [pc, #356]	@ (800207c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d00d      	beq.n	8001f3c <HAL_RCC_GetSysClockFreq+0x40>
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	f200 80a1 	bhi.w	8002068 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <HAL_RCC_GetSysClockFreq+0x34>
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d003      	beq.n	8001f36 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f2e:	e09b      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f30:	4b53      	ldr	r3, [pc, #332]	@ (8002080 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f32:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f34:	e09b      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f36:	4b53      	ldr	r3, [pc, #332]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f38:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f3a:	e098      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f3c:	4b4f      	ldr	r3, [pc, #316]	@ (800207c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f44:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f46:	4b4d      	ldr	r3, [pc, #308]	@ (800207c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d028      	beq.n	8001fa4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f52:	4b4a      	ldr	r3, [pc, #296]	@ (800207c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	099b      	lsrs	r3, r3, #6
 8001f58:	2200      	movs	r2, #0
 8001f5a:	623b      	str	r3, [r7, #32]
 8001f5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f64:	2100      	movs	r1, #0
 8001f66:	4b47      	ldr	r3, [pc, #284]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f68:	fb03 f201 	mul.w	r2, r3, r1
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	fb00 f303 	mul.w	r3, r0, r3
 8001f72:	4413      	add	r3, r2
 8001f74:	4a43      	ldr	r2, [pc, #268]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f76:	fba0 1202 	umull	r1, r2, r0, r2
 8001f7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f7c:	460a      	mov	r2, r1
 8001f7e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001f80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f82:	4413      	add	r3, r2
 8001f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f88:	2200      	movs	r2, #0
 8001f8a:	61bb      	str	r3, [r7, #24]
 8001f8c:	61fa      	str	r2, [r7, #28]
 8001f8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001f96:	f7fe f973 	bl	8000280 <__aeabi_uldivmod>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fa2:	e053      	b.n	800204c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fa4:	4b35      	ldr	r3, [pc, #212]	@ (800207c <HAL_RCC_GetSysClockFreq+0x180>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	099b      	lsrs	r3, r3, #6
 8001faa:	2200      	movs	r2, #0
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	617a      	str	r2, [r7, #20]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001fb6:	f04f 0b00 	mov.w	fp, #0
 8001fba:	4652      	mov	r2, sl
 8001fbc:	465b      	mov	r3, fp
 8001fbe:	f04f 0000 	mov.w	r0, #0
 8001fc2:	f04f 0100 	mov.w	r1, #0
 8001fc6:	0159      	lsls	r1, r3, #5
 8001fc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fcc:	0150      	lsls	r0, r2, #5
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	ebb2 080a 	subs.w	r8, r2, sl
 8001fd6:	eb63 090b 	sbc.w	r9, r3, fp
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001fe6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001fea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001fee:	ebb2 0408 	subs.w	r4, r2, r8
 8001ff2:	eb63 0509 	sbc.w	r5, r3, r9
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	00eb      	lsls	r3, r5, #3
 8002000:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002004:	00e2      	lsls	r2, r4, #3
 8002006:	4614      	mov	r4, r2
 8002008:	461d      	mov	r5, r3
 800200a:	eb14 030a 	adds.w	r3, r4, sl
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	eb45 030b 	adc.w	r3, r5, fp
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002022:	4629      	mov	r1, r5
 8002024:	028b      	lsls	r3, r1, #10
 8002026:	4621      	mov	r1, r4
 8002028:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800202c:	4621      	mov	r1, r4
 800202e:	028a      	lsls	r2, r1, #10
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002036:	2200      	movs	r2, #0
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	60fa      	str	r2, [r7, #12]
 800203c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002040:	f7fe f91e 	bl	8000280 <__aeabi_uldivmod>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4613      	mov	r3, r2
 800204a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800204c:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <HAL_RCC_GetSysClockFreq+0x180>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	0c1b      	lsrs	r3, r3, #16
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	3301      	adds	r3, #1
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800205c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800205e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002060:	fbb2 f3f3 	udiv	r3, r2, r3
 8002064:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002066:	e002      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002068:	4b05      	ldr	r3, [pc, #20]	@ (8002080 <HAL_RCC_GetSysClockFreq+0x184>)
 800206a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800206c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800206e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002070:	4618      	mov	r0, r3
 8002072:	3740      	adds	r7, #64	@ 0x40
 8002074:	46bd      	mov	sp, r7
 8002076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800207a:	bf00      	nop
 800207c:	40023800 	.word	0x40023800
 8002080:	00f42400 	.word	0x00f42400
 8002084:	017d7840 	.word	0x017d7840

08002088 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e07b      	b.n	8002192 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d108      	bne.n	80020b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020aa:	d009      	beq.n	80020c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	61da      	str	r2, [r3, #28]
 80020b2:	e005      	b.n	80020c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d106      	bne.n	80020e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7fe fef8 	bl	8000ed0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2202      	movs	r2, #2
 80020e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002144:	ea42 0103 	orr.w	r1, r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	0c1b      	lsrs	r3, r3, #16
 800215e:	f003 0104 	and.w	r1, r3, #4
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002166:	f003 0210 	and.w	r2, r3, #16
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	69da      	ldr	r2, [r3, #28]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002180:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b08a      	sub	sp, #40	@ 0x28
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80021a8:	2301      	movs	r3, #1
 80021aa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021ac:	f7ff f838 	bl	8001220 <HAL_GetTick>
 80021b0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021b8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80021c0:	887b      	ldrh	r3, [r7, #2]
 80021c2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021c4:	7ffb      	ldrb	r3, [r7, #31]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d00c      	beq.n	80021e4 <HAL_SPI_TransmitReceive+0x4a>
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021d0:	d106      	bne.n	80021e0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d102      	bne.n	80021e0 <HAL_SPI_TransmitReceive+0x46>
 80021da:	7ffb      	ldrb	r3, [r7, #31]
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d001      	beq.n	80021e4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80021e0:	2302      	movs	r3, #2
 80021e2:	e17f      	b.n	80024e4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <HAL_SPI_TransmitReceive+0x5c>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d002      	beq.n	80021f6 <HAL_SPI_TransmitReceive+0x5c>
 80021f0:	887b      	ldrh	r3, [r7, #2]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e174      	b.n	80024e4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_SPI_TransmitReceive+0x6e>
 8002204:	2302      	movs	r3, #2
 8002206:	e16d      	b.n	80024e4 <HAL_SPI_TransmitReceive+0x34a>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b04      	cmp	r3, #4
 800221a:	d003      	beq.n	8002224 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2205      	movs	r2, #5
 8002220:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	887a      	ldrh	r2, [r7, #2]
 800223a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	887a      	ldrh	r2, [r7, #2]
 8002246:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	887a      	ldrh	r2, [r7, #2]
 800224c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002264:	2b40      	cmp	r3, #64	@ 0x40
 8002266:	d007      	beq.n	8002278 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002276:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002280:	d17e      	bne.n	8002380 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <HAL_SPI_TransmitReceive+0xf6>
 800228a:	8afb      	ldrh	r3, [r7, #22]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d16c      	bne.n	800236a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002294:	881a      	ldrh	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a0:	1c9a      	adds	r2, r3, #2
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022b4:	e059      	b.n	800236a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d11b      	bne.n	80022fc <HAL_SPI_TransmitReceive+0x162>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d016      	beq.n	80022fc <HAL_SPI_TransmitReceive+0x162>
 80022ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d113      	bne.n	80022fc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d8:	881a      	ldrh	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e4:	1c9a      	adds	r2, r3, #2
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b01      	cmp	r3, #1
 8002308:	d119      	bne.n	800233e <HAL_SPI_TransmitReceive+0x1a4>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800230e:	b29b      	uxth	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d014      	beq.n	800233e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68da      	ldr	r2, [r3, #12]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800231e:	b292      	uxth	r2, r2
 8002320:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002326:	1c9a      	adds	r2, r3, #2
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002330:	b29b      	uxth	r3, r3
 8002332:	3b01      	subs	r3, #1
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800233a:	2301      	movs	r3, #1
 800233c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800233e:	f7fe ff6f 	bl	8001220 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800234a:	429a      	cmp	r2, r3
 800234c:	d80d      	bhi.n	800236a <HAL_SPI_TransmitReceive+0x1d0>
 800234e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002354:	d009      	beq.n	800236a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e0bc      	b.n	80024e4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800236e:	b29b      	uxth	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1a0      	bne.n	80022b6 <HAL_SPI_TransmitReceive+0x11c>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002378:	b29b      	uxth	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d19b      	bne.n	80022b6 <HAL_SPI_TransmitReceive+0x11c>
 800237e:	e082      	b.n	8002486 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <HAL_SPI_TransmitReceive+0x1f4>
 8002388:	8afb      	ldrh	r3, [r7, #22]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d171      	bne.n	8002472 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	330c      	adds	r3, #12
 8002398:	7812      	ldrb	r2, [r2, #0]
 800239a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023b4:	e05d      	b.n	8002472 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d11c      	bne.n	80023fe <HAL_SPI_TransmitReceive+0x264>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d017      	beq.n	80023fe <HAL_SPI_TransmitReceive+0x264>
 80023ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d114      	bne.n	80023fe <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	330c      	adds	r3, #12
 80023de:	7812      	ldrb	r2, [r2, #0]
 80023e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b01      	cmp	r3, #1
 800240a:	d119      	bne.n	8002440 <HAL_SPI_TransmitReceive+0x2a6>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002410:	b29b      	uxth	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d014      	beq.n	8002440 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002432:	b29b      	uxth	r3, r3
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800243c:	2301      	movs	r3, #1
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002440:	f7fe feee 	bl	8001220 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800244c:	429a      	cmp	r2, r3
 800244e:	d803      	bhi.n	8002458 <HAL_SPI_TransmitReceive+0x2be>
 8002450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002456:	d102      	bne.n	800245e <HAL_SPI_TransmitReceive+0x2c4>
 8002458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245a:	2b00      	cmp	r3, #0
 800245c:	d109      	bne.n	8002472 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e038      	b.n	80024e4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002476:	b29b      	uxth	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d19c      	bne.n	80023b6 <HAL_SPI_TransmitReceive+0x21c>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002480:	b29b      	uxth	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d197      	bne.n	80023b6 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002486:	6a3a      	ldr	r2, [r7, #32]
 8002488:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 f8b6 	bl	80025fc <SPI_EndRxTxTransaction>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d008      	beq.n	80024a8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2220      	movs	r2, #32
 800249a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e01d      	b.n	80024e4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10a      	bne.n	80024c6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024b0:	2300      	movs	r3, #0
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80024e2:	2300      	movs	r3, #0
  }
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3728      	adds	r7, #40	@ 0x28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	4613      	mov	r3, r2
 80024fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024fc:	f7fe fe90 	bl	8001220 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002504:	1a9b      	subs	r3, r3, r2
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	4413      	add	r3, r2
 800250a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800250c:	f7fe fe88 	bl	8001220 <HAL_GetTick>
 8002510:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002512:	4b39      	ldr	r3, [pc, #228]	@ (80025f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	015b      	lsls	r3, r3, #5
 8002518:	0d1b      	lsrs	r3, r3, #20
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	fb02 f303 	mul.w	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002522:	e055      	b.n	80025d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252a:	d051      	beq.n	80025d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800252c:	f7fe fe78 	bl	8001220 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	69fa      	ldr	r2, [r7, #28]
 8002538:	429a      	cmp	r2, r3
 800253a:	d902      	bls.n	8002542 <SPI_WaitFlagStateUntilTimeout+0x56>
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d13d      	bne.n	80025be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002550:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800255a:	d111      	bne.n	8002580 <SPI_WaitFlagStateUntilTimeout+0x94>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002564:	d004      	beq.n	8002570 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800256e:	d107      	bne.n	8002580 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800257e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002584:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002588:	d10f      	bne.n	80025aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e018      	b.n	80025f0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d102      	bne.n	80025ca <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	e002      	b.n	80025d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	3b01      	subs	r3, #1
 80025ce:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	4013      	ands	r3, r2
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	429a      	cmp	r2, r3
 80025de:	bf0c      	ite	eq
 80025e0:	2301      	moveq	r3, #1
 80025e2:	2300      	movne	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d19a      	bne.n	8002524 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3720      	adds	r7, #32
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20000000 	.word	0x20000000

080025fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af02      	add	r7, sp, #8
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2201      	movs	r2, #1
 8002610:	2102      	movs	r1, #2
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f7ff ff6a 	bl	80024ec <SPI_WaitFlagStateUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d007      	beq.n	800262e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002622:	f043 0220 	orr.w	r2, r3, #32
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e032      	b.n	8002694 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800262e:	4b1b      	ldr	r3, [pc, #108]	@ (800269c <SPI_EndRxTxTransaction+0xa0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a1b      	ldr	r2, [pc, #108]	@ (80026a0 <SPI_EndRxTxTransaction+0xa4>)
 8002634:	fba2 2303 	umull	r2, r3, r2, r3
 8002638:	0d5b      	lsrs	r3, r3, #21
 800263a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800263e:	fb02 f303 	mul.w	r3, r2, r3
 8002642:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800264c:	d112      	bne.n	8002674 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2200      	movs	r2, #0
 8002656:	2180      	movs	r1, #128	@ 0x80
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f7ff ff47 	bl	80024ec <SPI_WaitFlagStateUntilTimeout>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d016      	beq.n	8002692 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002668:	f043 0220 	orr.w	r2, r3, #32
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e00f      	b.n	8002694 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	3b01      	subs	r3, #1
 800267e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800268a:	2b80      	cmp	r3, #128	@ 0x80
 800268c:	d0f2      	beq.n	8002674 <SPI_EndRxTxTransaction+0x78>
 800268e:	e000      	b.n	8002692 <SPI_EndRxTxTransaction+0x96>
        break;
 8002690:	bf00      	nop
  }

  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20000000 	.word	0x20000000
 80026a0:	165e9f81 	.word	0x165e9f81

080026a4 <std>:
 80026a4:	2300      	movs	r3, #0
 80026a6:	b510      	push	{r4, lr}
 80026a8:	4604      	mov	r4, r0
 80026aa:	e9c0 3300 	strd	r3, r3, [r0]
 80026ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80026b2:	6083      	str	r3, [r0, #8]
 80026b4:	8181      	strh	r1, [r0, #12]
 80026b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80026b8:	81c2      	strh	r2, [r0, #14]
 80026ba:	6183      	str	r3, [r0, #24]
 80026bc:	4619      	mov	r1, r3
 80026be:	2208      	movs	r2, #8
 80026c0:	305c      	adds	r0, #92	@ 0x5c
 80026c2:	f000 fa1b 	bl	8002afc <memset>
 80026c6:	4b0d      	ldr	r3, [pc, #52]	@ (80026fc <std+0x58>)
 80026c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80026ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002700 <std+0x5c>)
 80026cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80026ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002704 <std+0x60>)
 80026d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80026d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002708 <std+0x64>)
 80026d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80026d6:	4b0d      	ldr	r3, [pc, #52]	@ (800270c <std+0x68>)
 80026d8:	6224      	str	r4, [r4, #32]
 80026da:	429c      	cmp	r4, r3
 80026dc:	d006      	beq.n	80026ec <std+0x48>
 80026de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80026e2:	4294      	cmp	r4, r2
 80026e4:	d002      	beq.n	80026ec <std+0x48>
 80026e6:	33d0      	adds	r3, #208	@ 0xd0
 80026e8:	429c      	cmp	r4, r3
 80026ea:	d105      	bne.n	80026f8 <std+0x54>
 80026ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80026f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026f4:	f000 ba7a 	b.w	8002bec <__retarget_lock_init_recursive>
 80026f8:	bd10      	pop	{r4, pc}
 80026fa:	bf00      	nop
 80026fc:	0800294d 	.word	0x0800294d
 8002700:	0800296f 	.word	0x0800296f
 8002704:	080029a7 	.word	0x080029a7
 8002708:	080029cb 	.word	0x080029cb
 800270c:	200000e8 	.word	0x200000e8

08002710 <stdio_exit_handler>:
 8002710:	4a02      	ldr	r2, [pc, #8]	@ (800271c <stdio_exit_handler+0xc>)
 8002712:	4903      	ldr	r1, [pc, #12]	@ (8002720 <stdio_exit_handler+0x10>)
 8002714:	4803      	ldr	r0, [pc, #12]	@ (8002724 <stdio_exit_handler+0x14>)
 8002716:	f000 b869 	b.w	80027ec <_fwalk_sglue>
 800271a:	bf00      	nop
 800271c:	2000000c 	.word	0x2000000c
 8002720:	08003739 	.word	0x08003739
 8002724:	2000001c 	.word	0x2000001c

08002728 <cleanup_stdio>:
 8002728:	6841      	ldr	r1, [r0, #4]
 800272a:	4b0c      	ldr	r3, [pc, #48]	@ (800275c <cleanup_stdio+0x34>)
 800272c:	4299      	cmp	r1, r3
 800272e:	b510      	push	{r4, lr}
 8002730:	4604      	mov	r4, r0
 8002732:	d001      	beq.n	8002738 <cleanup_stdio+0x10>
 8002734:	f001 f800 	bl	8003738 <_fflush_r>
 8002738:	68a1      	ldr	r1, [r4, #8]
 800273a:	4b09      	ldr	r3, [pc, #36]	@ (8002760 <cleanup_stdio+0x38>)
 800273c:	4299      	cmp	r1, r3
 800273e:	d002      	beq.n	8002746 <cleanup_stdio+0x1e>
 8002740:	4620      	mov	r0, r4
 8002742:	f000 fff9 	bl	8003738 <_fflush_r>
 8002746:	68e1      	ldr	r1, [r4, #12]
 8002748:	4b06      	ldr	r3, [pc, #24]	@ (8002764 <cleanup_stdio+0x3c>)
 800274a:	4299      	cmp	r1, r3
 800274c:	d004      	beq.n	8002758 <cleanup_stdio+0x30>
 800274e:	4620      	mov	r0, r4
 8002750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002754:	f000 bff0 	b.w	8003738 <_fflush_r>
 8002758:	bd10      	pop	{r4, pc}
 800275a:	bf00      	nop
 800275c:	200000e8 	.word	0x200000e8
 8002760:	20000150 	.word	0x20000150
 8002764:	200001b8 	.word	0x200001b8

08002768 <global_stdio_init.part.0>:
 8002768:	b510      	push	{r4, lr}
 800276a:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <global_stdio_init.part.0+0x30>)
 800276c:	4c0b      	ldr	r4, [pc, #44]	@ (800279c <global_stdio_init.part.0+0x34>)
 800276e:	4a0c      	ldr	r2, [pc, #48]	@ (80027a0 <global_stdio_init.part.0+0x38>)
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	4620      	mov	r0, r4
 8002774:	2200      	movs	r2, #0
 8002776:	2104      	movs	r1, #4
 8002778:	f7ff ff94 	bl	80026a4 <std>
 800277c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002780:	2201      	movs	r2, #1
 8002782:	2109      	movs	r1, #9
 8002784:	f7ff ff8e 	bl	80026a4 <std>
 8002788:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800278c:	2202      	movs	r2, #2
 800278e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002792:	2112      	movs	r1, #18
 8002794:	f7ff bf86 	b.w	80026a4 <std>
 8002798:	20000220 	.word	0x20000220
 800279c:	200000e8 	.word	0x200000e8
 80027a0:	08002711 	.word	0x08002711

080027a4 <__sfp_lock_acquire>:
 80027a4:	4801      	ldr	r0, [pc, #4]	@ (80027ac <__sfp_lock_acquire+0x8>)
 80027a6:	f000 ba22 	b.w	8002bee <__retarget_lock_acquire_recursive>
 80027aa:	bf00      	nop
 80027ac:	20000229 	.word	0x20000229

080027b0 <__sfp_lock_release>:
 80027b0:	4801      	ldr	r0, [pc, #4]	@ (80027b8 <__sfp_lock_release+0x8>)
 80027b2:	f000 ba1d 	b.w	8002bf0 <__retarget_lock_release_recursive>
 80027b6:	bf00      	nop
 80027b8:	20000229 	.word	0x20000229

080027bc <__sinit>:
 80027bc:	b510      	push	{r4, lr}
 80027be:	4604      	mov	r4, r0
 80027c0:	f7ff fff0 	bl	80027a4 <__sfp_lock_acquire>
 80027c4:	6a23      	ldr	r3, [r4, #32]
 80027c6:	b11b      	cbz	r3, 80027d0 <__sinit+0x14>
 80027c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027cc:	f7ff bff0 	b.w	80027b0 <__sfp_lock_release>
 80027d0:	4b04      	ldr	r3, [pc, #16]	@ (80027e4 <__sinit+0x28>)
 80027d2:	6223      	str	r3, [r4, #32]
 80027d4:	4b04      	ldr	r3, [pc, #16]	@ (80027e8 <__sinit+0x2c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f5      	bne.n	80027c8 <__sinit+0xc>
 80027dc:	f7ff ffc4 	bl	8002768 <global_stdio_init.part.0>
 80027e0:	e7f2      	b.n	80027c8 <__sinit+0xc>
 80027e2:	bf00      	nop
 80027e4:	08002729 	.word	0x08002729
 80027e8:	20000220 	.word	0x20000220

080027ec <_fwalk_sglue>:
 80027ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027f0:	4607      	mov	r7, r0
 80027f2:	4688      	mov	r8, r1
 80027f4:	4614      	mov	r4, r2
 80027f6:	2600      	movs	r6, #0
 80027f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80027fc:	f1b9 0901 	subs.w	r9, r9, #1
 8002800:	d505      	bpl.n	800280e <_fwalk_sglue+0x22>
 8002802:	6824      	ldr	r4, [r4, #0]
 8002804:	2c00      	cmp	r4, #0
 8002806:	d1f7      	bne.n	80027f8 <_fwalk_sglue+0xc>
 8002808:	4630      	mov	r0, r6
 800280a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800280e:	89ab      	ldrh	r3, [r5, #12]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d907      	bls.n	8002824 <_fwalk_sglue+0x38>
 8002814:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002818:	3301      	adds	r3, #1
 800281a:	d003      	beq.n	8002824 <_fwalk_sglue+0x38>
 800281c:	4629      	mov	r1, r5
 800281e:	4638      	mov	r0, r7
 8002820:	47c0      	blx	r8
 8002822:	4306      	orrs	r6, r0
 8002824:	3568      	adds	r5, #104	@ 0x68
 8002826:	e7e9      	b.n	80027fc <_fwalk_sglue+0x10>

08002828 <iprintf>:
 8002828:	b40f      	push	{r0, r1, r2, r3}
 800282a:	b507      	push	{r0, r1, r2, lr}
 800282c:	4906      	ldr	r1, [pc, #24]	@ (8002848 <iprintf+0x20>)
 800282e:	ab04      	add	r3, sp, #16
 8002830:	6808      	ldr	r0, [r1, #0]
 8002832:	f853 2b04 	ldr.w	r2, [r3], #4
 8002836:	6881      	ldr	r1, [r0, #8]
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	f000 fc55 	bl	80030e8 <_vfiprintf_r>
 800283e:	b003      	add	sp, #12
 8002840:	f85d eb04 	ldr.w	lr, [sp], #4
 8002844:	b004      	add	sp, #16
 8002846:	4770      	bx	lr
 8002848:	20000018 	.word	0x20000018

0800284c <_puts_r>:
 800284c:	6a03      	ldr	r3, [r0, #32]
 800284e:	b570      	push	{r4, r5, r6, lr}
 8002850:	6884      	ldr	r4, [r0, #8]
 8002852:	4605      	mov	r5, r0
 8002854:	460e      	mov	r6, r1
 8002856:	b90b      	cbnz	r3, 800285c <_puts_r+0x10>
 8002858:	f7ff ffb0 	bl	80027bc <__sinit>
 800285c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800285e:	07db      	lsls	r3, r3, #31
 8002860:	d405      	bmi.n	800286e <_puts_r+0x22>
 8002862:	89a3      	ldrh	r3, [r4, #12]
 8002864:	0598      	lsls	r0, r3, #22
 8002866:	d402      	bmi.n	800286e <_puts_r+0x22>
 8002868:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800286a:	f000 f9c0 	bl	8002bee <__retarget_lock_acquire_recursive>
 800286e:	89a3      	ldrh	r3, [r4, #12]
 8002870:	0719      	lsls	r1, r3, #28
 8002872:	d502      	bpl.n	800287a <_puts_r+0x2e>
 8002874:	6923      	ldr	r3, [r4, #16]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d135      	bne.n	80028e6 <_puts_r+0x9a>
 800287a:	4621      	mov	r1, r4
 800287c:	4628      	mov	r0, r5
 800287e:	f000 f8e7 	bl	8002a50 <__swsetup_r>
 8002882:	b380      	cbz	r0, 80028e6 <_puts_r+0x9a>
 8002884:	f04f 35ff 	mov.w	r5, #4294967295
 8002888:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800288a:	07da      	lsls	r2, r3, #31
 800288c:	d405      	bmi.n	800289a <_puts_r+0x4e>
 800288e:	89a3      	ldrh	r3, [r4, #12]
 8002890:	059b      	lsls	r3, r3, #22
 8002892:	d402      	bmi.n	800289a <_puts_r+0x4e>
 8002894:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002896:	f000 f9ab 	bl	8002bf0 <__retarget_lock_release_recursive>
 800289a:	4628      	mov	r0, r5
 800289c:	bd70      	pop	{r4, r5, r6, pc}
 800289e:	2b00      	cmp	r3, #0
 80028a0:	da04      	bge.n	80028ac <_puts_r+0x60>
 80028a2:	69a2      	ldr	r2, [r4, #24]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	dc17      	bgt.n	80028d8 <_puts_r+0x8c>
 80028a8:	290a      	cmp	r1, #10
 80028aa:	d015      	beq.n	80028d8 <_puts_r+0x8c>
 80028ac:	6823      	ldr	r3, [r4, #0]
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	6022      	str	r2, [r4, #0]
 80028b2:	7019      	strb	r1, [r3, #0]
 80028b4:	68a3      	ldr	r3, [r4, #8]
 80028b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80028ba:	3b01      	subs	r3, #1
 80028bc:	60a3      	str	r3, [r4, #8]
 80028be:	2900      	cmp	r1, #0
 80028c0:	d1ed      	bne.n	800289e <_puts_r+0x52>
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	da11      	bge.n	80028ea <_puts_r+0x9e>
 80028c6:	4622      	mov	r2, r4
 80028c8:	210a      	movs	r1, #10
 80028ca:	4628      	mov	r0, r5
 80028cc:	f000 f881 	bl	80029d2 <__swbuf_r>
 80028d0:	3001      	adds	r0, #1
 80028d2:	d0d7      	beq.n	8002884 <_puts_r+0x38>
 80028d4:	250a      	movs	r5, #10
 80028d6:	e7d7      	b.n	8002888 <_puts_r+0x3c>
 80028d8:	4622      	mov	r2, r4
 80028da:	4628      	mov	r0, r5
 80028dc:	f000 f879 	bl	80029d2 <__swbuf_r>
 80028e0:	3001      	adds	r0, #1
 80028e2:	d1e7      	bne.n	80028b4 <_puts_r+0x68>
 80028e4:	e7ce      	b.n	8002884 <_puts_r+0x38>
 80028e6:	3e01      	subs	r6, #1
 80028e8:	e7e4      	b.n	80028b4 <_puts_r+0x68>
 80028ea:	6823      	ldr	r3, [r4, #0]
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	6022      	str	r2, [r4, #0]
 80028f0:	220a      	movs	r2, #10
 80028f2:	701a      	strb	r2, [r3, #0]
 80028f4:	e7ee      	b.n	80028d4 <_puts_r+0x88>
	...

080028f8 <puts>:
 80028f8:	4b02      	ldr	r3, [pc, #8]	@ (8002904 <puts+0xc>)
 80028fa:	4601      	mov	r1, r0
 80028fc:	6818      	ldr	r0, [r3, #0]
 80028fe:	f7ff bfa5 	b.w	800284c <_puts_r>
 8002902:	bf00      	nop
 8002904:	20000018 	.word	0x20000018

08002908 <siprintf>:
 8002908:	b40e      	push	{r1, r2, r3}
 800290a:	b510      	push	{r4, lr}
 800290c:	b09d      	sub	sp, #116	@ 0x74
 800290e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002910:	9002      	str	r0, [sp, #8]
 8002912:	9006      	str	r0, [sp, #24]
 8002914:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002918:	480a      	ldr	r0, [pc, #40]	@ (8002944 <siprintf+0x3c>)
 800291a:	9107      	str	r1, [sp, #28]
 800291c:	9104      	str	r1, [sp, #16]
 800291e:	490a      	ldr	r1, [pc, #40]	@ (8002948 <siprintf+0x40>)
 8002920:	f853 2b04 	ldr.w	r2, [r3], #4
 8002924:	9105      	str	r1, [sp, #20]
 8002926:	2400      	movs	r4, #0
 8002928:	a902      	add	r1, sp, #8
 800292a:	6800      	ldr	r0, [r0, #0]
 800292c:	9301      	str	r3, [sp, #4]
 800292e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002930:	f000 fab4 	bl	8002e9c <_svfiprintf_r>
 8002934:	9b02      	ldr	r3, [sp, #8]
 8002936:	701c      	strb	r4, [r3, #0]
 8002938:	b01d      	add	sp, #116	@ 0x74
 800293a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800293e:	b003      	add	sp, #12
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	20000018 	.word	0x20000018
 8002948:	ffff0208 	.word	0xffff0208

0800294c <__sread>:
 800294c:	b510      	push	{r4, lr}
 800294e:	460c      	mov	r4, r1
 8002950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002954:	f000 f8fc 	bl	8002b50 <_read_r>
 8002958:	2800      	cmp	r0, #0
 800295a:	bfab      	itete	ge
 800295c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800295e:	89a3      	ldrhlt	r3, [r4, #12]
 8002960:	181b      	addge	r3, r3, r0
 8002962:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002966:	bfac      	ite	ge
 8002968:	6563      	strge	r3, [r4, #84]	@ 0x54
 800296a:	81a3      	strhlt	r3, [r4, #12]
 800296c:	bd10      	pop	{r4, pc}

0800296e <__swrite>:
 800296e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002972:	461f      	mov	r7, r3
 8002974:	898b      	ldrh	r3, [r1, #12]
 8002976:	05db      	lsls	r3, r3, #23
 8002978:	4605      	mov	r5, r0
 800297a:	460c      	mov	r4, r1
 800297c:	4616      	mov	r6, r2
 800297e:	d505      	bpl.n	800298c <__swrite+0x1e>
 8002980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002984:	2302      	movs	r3, #2
 8002986:	2200      	movs	r2, #0
 8002988:	f000 f8d0 	bl	8002b2c <_lseek_r>
 800298c:	89a3      	ldrh	r3, [r4, #12]
 800298e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002992:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002996:	81a3      	strh	r3, [r4, #12]
 8002998:	4632      	mov	r2, r6
 800299a:	463b      	mov	r3, r7
 800299c:	4628      	mov	r0, r5
 800299e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80029a2:	f000 b8e7 	b.w	8002b74 <_write_r>

080029a6 <__sseek>:
 80029a6:	b510      	push	{r4, lr}
 80029a8:	460c      	mov	r4, r1
 80029aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029ae:	f000 f8bd 	bl	8002b2c <_lseek_r>
 80029b2:	1c43      	adds	r3, r0, #1
 80029b4:	89a3      	ldrh	r3, [r4, #12]
 80029b6:	bf15      	itete	ne
 80029b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80029ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80029be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80029c2:	81a3      	strheq	r3, [r4, #12]
 80029c4:	bf18      	it	ne
 80029c6:	81a3      	strhne	r3, [r4, #12]
 80029c8:	bd10      	pop	{r4, pc}

080029ca <__sclose>:
 80029ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029ce:	f000 b89d 	b.w	8002b0c <_close_r>

080029d2 <__swbuf_r>:
 80029d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d4:	460e      	mov	r6, r1
 80029d6:	4614      	mov	r4, r2
 80029d8:	4605      	mov	r5, r0
 80029da:	b118      	cbz	r0, 80029e4 <__swbuf_r+0x12>
 80029dc:	6a03      	ldr	r3, [r0, #32]
 80029de:	b90b      	cbnz	r3, 80029e4 <__swbuf_r+0x12>
 80029e0:	f7ff feec 	bl	80027bc <__sinit>
 80029e4:	69a3      	ldr	r3, [r4, #24]
 80029e6:	60a3      	str	r3, [r4, #8]
 80029e8:	89a3      	ldrh	r3, [r4, #12]
 80029ea:	071a      	lsls	r2, r3, #28
 80029ec:	d501      	bpl.n	80029f2 <__swbuf_r+0x20>
 80029ee:	6923      	ldr	r3, [r4, #16]
 80029f0:	b943      	cbnz	r3, 8002a04 <__swbuf_r+0x32>
 80029f2:	4621      	mov	r1, r4
 80029f4:	4628      	mov	r0, r5
 80029f6:	f000 f82b 	bl	8002a50 <__swsetup_r>
 80029fa:	b118      	cbz	r0, 8002a04 <__swbuf_r+0x32>
 80029fc:	f04f 37ff 	mov.w	r7, #4294967295
 8002a00:	4638      	mov	r0, r7
 8002a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	6922      	ldr	r2, [r4, #16]
 8002a08:	1a98      	subs	r0, r3, r2
 8002a0a:	6963      	ldr	r3, [r4, #20]
 8002a0c:	b2f6      	uxtb	r6, r6
 8002a0e:	4283      	cmp	r3, r0
 8002a10:	4637      	mov	r7, r6
 8002a12:	dc05      	bgt.n	8002a20 <__swbuf_r+0x4e>
 8002a14:	4621      	mov	r1, r4
 8002a16:	4628      	mov	r0, r5
 8002a18:	f000 fe8e 	bl	8003738 <_fflush_r>
 8002a1c:	2800      	cmp	r0, #0
 8002a1e:	d1ed      	bne.n	80029fc <__swbuf_r+0x2a>
 8002a20:	68a3      	ldr	r3, [r4, #8]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	60a3      	str	r3, [r4, #8]
 8002a26:	6823      	ldr	r3, [r4, #0]
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	6022      	str	r2, [r4, #0]
 8002a2c:	701e      	strb	r6, [r3, #0]
 8002a2e:	6962      	ldr	r2, [r4, #20]
 8002a30:	1c43      	adds	r3, r0, #1
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d004      	beq.n	8002a40 <__swbuf_r+0x6e>
 8002a36:	89a3      	ldrh	r3, [r4, #12]
 8002a38:	07db      	lsls	r3, r3, #31
 8002a3a:	d5e1      	bpl.n	8002a00 <__swbuf_r+0x2e>
 8002a3c:	2e0a      	cmp	r6, #10
 8002a3e:	d1df      	bne.n	8002a00 <__swbuf_r+0x2e>
 8002a40:	4621      	mov	r1, r4
 8002a42:	4628      	mov	r0, r5
 8002a44:	f000 fe78 	bl	8003738 <_fflush_r>
 8002a48:	2800      	cmp	r0, #0
 8002a4a:	d0d9      	beq.n	8002a00 <__swbuf_r+0x2e>
 8002a4c:	e7d6      	b.n	80029fc <__swbuf_r+0x2a>
	...

08002a50 <__swsetup_r>:
 8002a50:	b538      	push	{r3, r4, r5, lr}
 8002a52:	4b29      	ldr	r3, [pc, #164]	@ (8002af8 <__swsetup_r+0xa8>)
 8002a54:	4605      	mov	r5, r0
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	460c      	mov	r4, r1
 8002a5a:	b118      	cbz	r0, 8002a64 <__swsetup_r+0x14>
 8002a5c:	6a03      	ldr	r3, [r0, #32]
 8002a5e:	b90b      	cbnz	r3, 8002a64 <__swsetup_r+0x14>
 8002a60:	f7ff feac 	bl	80027bc <__sinit>
 8002a64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a68:	0719      	lsls	r1, r3, #28
 8002a6a:	d422      	bmi.n	8002ab2 <__swsetup_r+0x62>
 8002a6c:	06da      	lsls	r2, r3, #27
 8002a6e:	d407      	bmi.n	8002a80 <__swsetup_r+0x30>
 8002a70:	2209      	movs	r2, #9
 8002a72:	602a      	str	r2, [r5, #0]
 8002a74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a78:	81a3      	strh	r3, [r4, #12]
 8002a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a7e:	e033      	b.n	8002ae8 <__swsetup_r+0x98>
 8002a80:	0758      	lsls	r0, r3, #29
 8002a82:	d512      	bpl.n	8002aaa <__swsetup_r+0x5a>
 8002a84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002a86:	b141      	cbz	r1, 8002a9a <__swsetup_r+0x4a>
 8002a88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002a8c:	4299      	cmp	r1, r3
 8002a8e:	d002      	beq.n	8002a96 <__swsetup_r+0x46>
 8002a90:	4628      	mov	r0, r5
 8002a92:	f000 f8af 	bl	8002bf4 <_free_r>
 8002a96:	2300      	movs	r3, #0
 8002a98:	6363      	str	r3, [r4, #52]	@ 0x34
 8002a9a:	89a3      	ldrh	r3, [r4, #12]
 8002a9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002aa0:	81a3      	strh	r3, [r4, #12]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	6063      	str	r3, [r4, #4]
 8002aa6:	6923      	ldr	r3, [r4, #16]
 8002aa8:	6023      	str	r3, [r4, #0]
 8002aaa:	89a3      	ldrh	r3, [r4, #12]
 8002aac:	f043 0308 	orr.w	r3, r3, #8
 8002ab0:	81a3      	strh	r3, [r4, #12]
 8002ab2:	6923      	ldr	r3, [r4, #16]
 8002ab4:	b94b      	cbnz	r3, 8002aca <__swsetup_r+0x7a>
 8002ab6:	89a3      	ldrh	r3, [r4, #12]
 8002ab8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ac0:	d003      	beq.n	8002aca <__swsetup_r+0x7a>
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	4628      	mov	r0, r5
 8002ac6:	f000 fe85 	bl	80037d4 <__smakebuf_r>
 8002aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ace:	f013 0201 	ands.w	r2, r3, #1
 8002ad2:	d00a      	beq.n	8002aea <__swsetup_r+0x9a>
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	60a2      	str	r2, [r4, #8]
 8002ad8:	6962      	ldr	r2, [r4, #20]
 8002ada:	4252      	negs	r2, r2
 8002adc:	61a2      	str	r2, [r4, #24]
 8002ade:	6922      	ldr	r2, [r4, #16]
 8002ae0:	b942      	cbnz	r2, 8002af4 <__swsetup_r+0xa4>
 8002ae2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002ae6:	d1c5      	bne.n	8002a74 <__swsetup_r+0x24>
 8002ae8:	bd38      	pop	{r3, r4, r5, pc}
 8002aea:	0799      	lsls	r1, r3, #30
 8002aec:	bf58      	it	pl
 8002aee:	6962      	ldrpl	r2, [r4, #20]
 8002af0:	60a2      	str	r2, [r4, #8]
 8002af2:	e7f4      	b.n	8002ade <__swsetup_r+0x8e>
 8002af4:	2000      	movs	r0, #0
 8002af6:	e7f7      	b.n	8002ae8 <__swsetup_r+0x98>
 8002af8:	20000018 	.word	0x20000018

08002afc <memset>:
 8002afc:	4402      	add	r2, r0
 8002afe:	4603      	mov	r3, r0
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d100      	bne.n	8002b06 <memset+0xa>
 8002b04:	4770      	bx	lr
 8002b06:	f803 1b01 	strb.w	r1, [r3], #1
 8002b0a:	e7f9      	b.n	8002b00 <memset+0x4>

08002b0c <_close_r>:
 8002b0c:	b538      	push	{r3, r4, r5, lr}
 8002b0e:	4d06      	ldr	r5, [pc, #24]	@ (8002b28 <_close_r+0x1c>)
 8002b10:	2300      	movs	r3, #0
 8002b12:	4604      	mov	r4, r0
 8002b14:	4608      	mov	r0, r1
 8002b16:	602b      	str	r3, [r5, #0]
 8002b18:	f7fe fa75 	bl	8001006 <_close>
 8002b1c:	1c43      	adds	r3, r0, #1
 8002b1e:	d102      	bne.n	8002b26 <_close_r+0x1a>
 8002b20:	682b      	ldr	r3, [r5, #0]
 8002b22:	b103      	cbz	r3, 8002b26 <_close_r+0x1a>
 8002b24:	6023      	str	r3, [r4, #0]
 8002b26:	bd38      	pop	{r3, r4, r5, pc}
 8002b28:	20000224 	.word	0x20000224

08002b2c <_lseek_r>:
 8002b2c:	b538      	push	{r3, r4, r5, lr}
 8002b2e:	4d07      	ldr	r5, [pc, #28]	@ (8002b4c <_lseek_r+0x20>)
 8002b30:	4604      	mov	r4, r0
 8002b32:	4608      	mov	r0, r1
 8002b34:	4611      	mov	r1, r2
 8002b36:	2200      	movs	r2, #0
 8002b38:	602a      	str	r2, [r5, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	f7fe fa8a 	bl	8001054 <_lseek>
 8002b40:	1c43      	adds	r3, r0, #1
 8002b42:	d102      	bne.n	8002b4a <_lseek_r+0x1e>
 8002b44:	682b      	ldr	r3, [r5, #0]
 8002b46:	b103      	cbz	r3, 8002b4a <_lseek_r+0x1e>
 8002b48:	6023      	str	r3, [r4, #0]
 8002b4a:	bd38      	pop	{r3, r4, r5, pc}
 8002b4c:	20000224 	.word	0x20000224

08002b50 <_read_r>:
 8002b50:	b538      	push	{r3, r4, r5, lr}
 8002b52:	4d07      	ldr	r5, [pc, #28]	@ (8002b70 <_read_r+0x20>)
 8002b54:	4604      	mov	r4, r0
 8002b56:	4608      	mov	r0, r1
 8002b58:	4611      	mov	r1, r2
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	602a      	str	r2, [r5, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f7fe fa34 	bl	8000fcc <_read>
 8002b64:	1c43      	adds	r3, r0, #1
 8002b66:	d102      	bne.n	8002b6e <_read_r+0x1e>
 8002b68:	682b      	ldr	r3, [r5, #0]
 8002b6a:	b103      	cbz	r3, 8002b6e <_read_r+0x1e>
 8002b6c:	6023      	str	r3, [r4, #0]
 8002b6e:	bd38      	pop	{r3, r4, r5, pc}
 8002b70:	20000224 	.word	0x20000224

08002b74 <_write_r>:
 8002b74:	b538      	push	{r3, r4, r5, lr}
 8002b76:	4d07      	ldr	r5, [pc, #28]	@ (8002b94 <_write_r+0x20>)
 8002b78:	4604      	mov	r4, r0
 8002b7a:	4608      	mov	r0, r1
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	2200      	movs	r2, #0
 8002b80:	602a      	str	r2, [r5, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	f7fd fd39 	bl	80005fa <_write>
 8002b88:	1c43      	adds	r3, r0, #1
 8002b8a:	d102      	bne.n	8002b92 <_write_r+0x1e>
 8002b8c:	682b      	ldr	r3, [r5, #0]
 8002b8e:	b103      	cbz	r3, 8002b92 <_write_r+0x1e>
 8002b90:	6023      	str	r3, [r4, #0]
 8002b92:	bd38      	pop	{r3, r4, r5, pc}
 8002b94:	20000224 	.word	0x20000224

08002b98 <__errno>:
 8002b98:	4b01      	ldr	r3, [pc, #4]	@ (8002ba0 <__errno+0x8>)
 8002b9a:	6818      	ldr	r0, [r3, #0]
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	20000018 	.word	0x20000018

08002ba4 <__libc_init_array>:
 8002ba4:	b570      	push	{r4, r5, r6, lr}
 8002ba6:	4d0d      	ldr	r5, [pc, #52]	@ (8002bdc <__libc_init_array+0x38>)
 8002ba8:	4c0d      	ldr	r4, [pc, #52]	@ (8002be0 <__libc_init_array+0x3c>)
 8002baa:	1b64      	subs	r4, r4, r5
 8002bac:	10a4      	asrs	r4, r4, #2
 8002bae:	2600      	movs	r6, #0
 8002bb0:	42a6      	cmp	r6, r4
 8002bb2:	d109      	bne.n	8002bc8 <__libc_init_array+0x24>
 8002bb4:	4d0b      	ldr	r5, [pc, #44]	@ (8002be4 <__libc_init_array+0x40>)
 8002bb6:	4c0c      	ldr	r4, [pc, #48]	@ (8002be8 <__libc_init_array+0x44>)
 8002bb8:	f000 fed8 	bl	800396c <_init>
 8002bbc:	1b64      	subs	r4, r4, r5
 8002bbe:	10a4      	asrs	r4, r4, #2
 8002bc0:	2600      	movs	r6, #0
 8002bc2:	42a6      	cmp	r6, r4
 8002bc4:	d105      	bne.n	8002bd2 <__libc_init_array+0x2e>
 8002bc6:	bd70      	pop	{r4, r5, r6, pc}
 8002bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bcc:	4798      	blx	r3
 8002bce:	3601      	adds	r6, #1
 8002bd0:	e7ee      	b.n	8002bb0 <__libc_init_array+0xc>
 8002bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd6:	4798      	blx	r3
 8002bd8:	3601      	adds	r6, #1
 8002bda:	e7f2      	b.n	8002bc2 <__libc_init_array+0x1e>
 8002bdc:	08003c6c 	.word	0x08003c6c
 8002be0:	08003c6c 	.word	0x08003c6c
 8002be4:	08003c6c 	.word	0x08003c6c
 8002be8:	08003c70 	.word	0x08003c70

08002bec <__retarget_lock_init_recursive>:
 8002bec:	4770      	bx	lr

08002bee <__retarget_lock_acquire_recursive>:
 8002bee:	4770      	bx	lr

08002bf0 <__retarget_lock_release_recursive>:
 8002bf0:	4770      	bx	lr
	...

08002bf4 <_free_r>:
 8002bf4:	b538      	push	{r3, r4, r5, lr}
 8002bf6:	4605      	mov	r5, r0
 8002bf8:	2900      	cmp	r1, #0
 8002bfa:	d041      	beq.n	8002c80 <_free_r+0x8c>
 8002bfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c00:	1f0c      	subs	r4, r1, #4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	bfb8      	it	lt
 8002c06:	18e4      	addlt	r4, r4, r3
 8002c08:	f000 f8e0 	bl	8002dcc <__malloc_lock>
 8002c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8002c84 <_free_r+0x90>)
 8002c0e:	6813      	ldr	r3, [r2, #0]
 8002c10:	b933      	cbnz	r3, 8002c20 <_free_r+0x2c>
 8002c12:	6063      	str	r3, [r4, #4]
 8002c14:	6014      	str	r4, [r2, #0]
 8002c16:	4628      	mov	r0, r5
 8002c18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c1c:	f000 b8dc 	b.w	8002dd8 <__malloc_unlock>
 8002c20:	42a3      	cmp	r3, r4
 8002c22:	d908      	bls.n	8002c36 <_free_r+0x42>
 8002c24:	6820      	ldr	r0, [r4, #0]
 8002c26:	1821      	adds	r1, r4, r0
 8002c28:	428b      	cmp	r3, r1
 8002c2a:	bf01      	itttt	eq
 8002c2c:	6819      	ldreq	r1, [r3, #0]
 8002c2e:	685b      	ldreq	r3, [r3, #4]
 8002c30:	1809      	addeq	r1, r1, r0
 8002c32:	6021      	streq	r1, [r4, #0]
 8002c34:	e7ed      	b.n	8002c12 <_free_r+0x1e>
 8002c36:	461a      	mov	r2, r3
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	b10b      	cbz	r3, 8002c40 <_free_r+0x4c>
 8002c3c:	42a3      	cmp	r3, r4
 8002c3e:	d9fa      	bls.n	8002c36 <_free_r+0x42>
 8002c40:	6811      	ldr	r1, [r2, #0]
 8002c42:	1850      	adds	r0, r2, r1
 8002c44:	42a0      	cmp	r0, r4
 8002c46:	d10b      	bne.n	8002c60 <_free_r+0x6c>
 8002c48:	6820      	ldr	r0, [r4, #0]
 8002c4a:	4401      	add	r1, r0
 8002c4c:	1850      	adds	r0, r2, r1
 8002c4e:	4283      	cmp	r3, r0
 8002c50:	6011      	str	r1, [r2, #0]
 8002c52:	d1e0      	bne.n	8002c16 <_free_r+0x22>
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	6053      	str	r3, [r2, #4]
 8002c5a:	4408      	add	r0, r1
 8002c5c:	6010      	str	r0, [r2, #0]
 8002c5e:	e7da      	b.n	8002c16 <_free_r+0x22>
 8002c60:	d902      	bls.n	8002c68 <_free_r+0x74>
 8002c62:	230c      	movs	r3, #12
 8002c64:	602b      	str	r3, [r5, #0]
 8002c66:	e7d6      	b.n	8002c16 <_free_r+0x22>
 8002c68:	6820      	ldr	r0, [r4, #0]
 8002c6a:	1821      	adds	r1, r4, r0
 8002c6c:	428b      	cmp	r3, r1
 8002c6e:	bf04      	itt	eq
 8002c70:	6819      	ldreq	r1, [r3, #0]
 8002c72:	685b      	ldreq	r3, [r3, #4]
 8002c74:	6063      	str	r3, [r4, #4]
 8002c76:	bf04      	itt	eq
 8002c78:	1809      	addeq	r1, r1, r0
 8002c7a:	6021      	streq	r1, [r4, #0]
 8002c7c:	6054      	str	r4, [r2, #4]
 8002c7e:	e7ca      	b.n	8002c16 <_free_r+0x22>
 8002c80:	bd38      	pop	{r3, r4, r5, pc}
 8002c82:	bf00      	nop
 8002c84:	20000230 	.word	0x20000230

08002c88 <sbrk_aligned>:
 8002c88:	b570      	push	{r4, r5, r6, lr}
 8002c8a:	4e0f      	ldr	r6, [pc, #60]	@ (8002cc8 <sbrk_aligned+0x40>)
 8002c8c:	460c      	mov	r4, r1
 8002c8e:	6831      	ldr	r1, [r6, #0]
 8002c90:	4605      	mov	r5, r0
 8002c92:	b911      	cbnz	r1, 8002c9a <sbrk_aligned+0x12>
 8002c94:	f000 fe16 	bl	80038c4 <_sbrk_r>
 8002c98:	6030      	str	r0, [r6, #0]
 8002c9a:	4621      	mov	r1, r4
 8002c9c:	4628      	mov	r0, r5
 8002c9e:	f000 fe11 	bl	80038c4 <_sbrk_r>
 8002ca2:	1c43      	adds	r3, r0, #1
 8002ca4:	d103      	bne.n	8002cae <sbrk_aligned+0x26>
 8002ca6:	f04f 34ff 	mov.w	r4, #4294967295
 8002caa:	4620      	mov	r0, r4
 8002cac:	bd70      	pop	{r4, r5, r6, pc}
 8002cae:	1cc4      	adds	r4, r0, #3
 8002cb0:	f024 0403 	bic.w	r4, r4, #3
 8002cb4:	42a0      	cmp	r0, r4
 8002cb6:	d0f8      	beq.n	8002caa <sbrk_aligned+0x22>
 8002cb8:	1a21      	subs	r1, r4, r0
 8002cba:	4628      	mov	r0, r5
 8002cbc:	f000 fe02 	bl	80038c4 <_sbrk_r>
 8002cc0:	3001      	adds	r0, #1
 8002cc2:	d1f2      	bne.n	8002caa <sbrk_aligned+0x22>
 8002cc4:	e7ef      	b.n	8002ca6 <sbrk_aligned+0x1e>
 8002cc6:	bf00      	nop
 8002cc8:	2000022c 	.word	0x2000022c

08002ccc <_malloc_r>:
 8002ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cd0:	1ccd      	adds	r5, r1, #3
 8002cd2:	f025 0503 	bic.w	r5, r5, #3
 8002cd6:	3508      	adds	r5, #8
 8002cd8:	2d0c      	cmp	r5, #12
 8002cda:	bf38      	it	cc
 8002cdc:	250c      	movcc	r5, #12
 8002cde:	2d00      	cmp	r5, #0
 8002ce0:	4606      	mov	r6, r0
 8002ce2:	db01      	blt.n	8002ce8 <_malloc_r+0x1c>
 8002ce4:	42a9      	cmp	r1, r5
 8002ce6:	d904      	bls.n	8002cf2 <_malloc_r+0x26>
 8002ce8:	230c      	movs	r3, #12
 8002cea:	6033      	str	r3, [r6, #0]
 8002cec:	2000      	movs	r0, #0
 8002cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cf2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002dc8 <_malloc_r+0xfc>
 8002cf6:	f000 f869 	bl	8002dcc <__malloc_lock>
 8002cfa:	f8d8 3000 	ldr.w	r3, [r8]
 8002cfe:	461c      	mov	r4, r3
 8002d00:	bb44      	cbnz	r4, 8002d54 <_malloc_r+0x88>
 8002d02:	4629      	mov	r1, r5
 8002d04:	4630      	mov	r0, r6
 8002d06:	f7ff ffbf 	bl	8002c88 <sbrk_aligned>
 8002d0a:	1c43      	adds	r3, r0, #1
 8002d0c:	4604      	mov	r4, r0
 8002d0e:	d158      	bne.n	8002dc2 <_malloc_r+0xf6>
 8002d10:	f8d8 4000 	ldr.w	r4, [r8]
 8002d14:	4627      	mov	r7, r4
 8002d16:	2f00      	cmp	r7, #0
 8002d18:	d143      	bne.n	8002da2 <_malloc_r+0xd6>
 8002d1a:	2c00      	cmp	r4, #0
 8002d1c:	d04b      	beq.n	8002db6 <_malloc_r+0xea>
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	4639      	mov	r1, r7
 8002d22:	4630      	mov	r0, r6
 8002d24:	eb04 0903 	add.w	r9, r4, r3
 8002d28:	f000 fdcc 	bl	80038c4 <_sbrk_r>
 8002d2c:	4581      	cmp	r9, r0
 8002d2e:	d142      	bne.n	8002db6 <_malloc_r+0xea>
 8002d30:	6821      	ldr	r1, [r4, #0]
 8002d32:	1a6d      	subs	r5, r5, r1
 8002d34:	4629      	mov	r1, r5
 8002d36:	4630      	mov	r0, r6
 8002d38:	f7ff ffa6 	bl	8002c88 <sbrk_aligned>
 8002d3c:	3001      	adds	r0, #1
 8002d3e:	d03a      	beq.n	8002db6 <_malloc_r+0xea>
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	442b      	add	r3, r5
 8002d44:	6023      	str	r3, [r4, #0]
 8002d46:	f8d8 3000 	ldr.w	r3, [r8]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	bb62      	cbnz	r2, 8002da8 <_malloc_r+0xdc>
 8002d4e:	f8c8 7000 	str.w	r7, [r8]
 8002d52:	e00f      	b.n	8002d74 <_malloc_r+0xa8>
 8002d54:	6822      	ldr	r2, [r4, #0]
 8002d56:	1b52      	subs	r2, r2, r5
 8002d58:	d420      	bmi.n	8002d9c <_malloc_r+0xd0>
 8002d5a:	2a0b      	cmp	r2, #11
 8002d5c:	d917      	bls.n	8002d8e <_malloc_r+0xc2>
 8002d5e:	1961      	adds	r1, r4, r5
 8002d60:	42a3      	cmp	r3, r4
 8002d62:	6025      	str	r5, [r4, #0]
 8002d64:	bf18      	it	ne
 8002d66:	6059      	strne	r1, [r3, #4]
 8002d68:	6863      	ldr	r3, [r4, #4]
 8002d6a:	bf08      	it	eq
 8002d6c:	f8c8 1000 	streq.w	r1, [r8]
 8002d70:	5162      	str	r2, [r4, r5]
 8002d72:	604b      	str	r3, [r1, #4]
 8002d74:	4630      	mov	r0, r6
 8002d76:	f000 f82f 	bl	8002dd8 <__malloc_unlock>
 8002d7a:	f104 000b 	add.w	r0, r4, #11
 8002d7e:	1d23      	adds	r3, r4, #4
 8002d80:	f020 0007 	bic.w	r0, r0, #7
 8002d84:	1ac2      	subs	r2, r0, r3
 8002d86:	bf1c      	itt	ne
 8002d88:	1a1b      	subne	r3, r3, r0
 8002d8a:	50a3      	strne	r3, [r4, r2]
 8002d8c:	e7af      	b.n	8002cee <_malloc_r+0x22>
 8002d8e:	6862      	ldr	r2, [r4, #4]
 8002d90:	42a3      	cmp	r3, r4
 8002d92:	bf0c      	ite	eq
 8002d94:	f8c8 2000 	streq.w	r2, [r8]
 8002d98:	605a      	strne	r2, [r3, #4]
 8002d9a:	e7eb      	b.n	8002d74 <_malloc_r+0xa8>
 8002d9c:	4623      	mov	r3, r4
 8002d9e:	6864      	ldr	r4, [r4, #4]
 8002da0:	e7ae      	b.n	8002d00 <_malloc_r+0x34>
 8002da2:	463c      	mov	r4, r7
 8002da4:	687f      	ldr	r7, [r7, #4]
 8002da6:	e7b6      	b.n	8002d16 <_malloc_r+0x4a>
 8002da8:	461a      	mov	r2, r3
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	42a3      	cmp	r3, r4
 8002dae:	d1fb      	bne.n	8002da8 <_malloc_r+0xdc>
 8002db0:	2300      	movs	r3, #0
 8002db2:	6053      	str	r3, [r2, #4]
 8002db4:	e7de      	b.n	8002d74 <_malloc_r+0xa8>
 8002db6:	230c      	movs	r3, #12
 8002db8:	6033      	str	r3, [r6, #0]
 8002dba:	4630      	mov	r0, r6
 8002dbc:	f000 f80c 	bl	8002dd8 <__malloc_unlock>
 8002dc0:	e794      	b.n	8002cec <_malloc_r+0x20>
 8002dc2:	6005      	str	r5, [r0, #0]
 8002dc4:	e7d6      	b.n	8002d74 <_malloc_r+0xa8>
 8002dc6:	bf00      	nop
 8002dc8:	20000230 	.word	0x20000230

08002dcc <__malloc_lock>:
 8002dcc:	4801      	ldr	r0, [pc, #4]	@ (8002dd4 <__malloc_lock+0x8>)
 8002dce:	f7ff bf0e 	b.w	8002bee <__retarget_lock_acquire_recursive>
 8002dd2:	bf00      	nop
 8002dd4:	20000228 	.word	0x20000228

08002dd8 <__malloc_unlock>:
 8002dd8:	4801      	ldr	r0, [pc, #4]	@ (8002de0 <__malloc_unlock+0x8>)
 8002dda:	f7ff bf09 	b.w	8002bf0 <__retarget_lock_release_recursive>
 8002dde:	bf00      	nop
 8002de0:	20000228 	.word	0x20000228

08002de4 <__ssputs_r>:
 8002de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002de8:	688e      	ldr	r6, [r1, #8]
 8002dea:	461f      	mov	r7, r3
 8002dec:	42be      	cmp	r6, r7
 8002dee:	680b      	ldr	r3, [r1, #0]
 8002df0:	4682      	mov	sl, r0
 8002df2:	460c      	mov	r4, r1
 8002df4:	4690      	mov	r8, r2
 8002df6:	d82d      	bhi.n	8002e54 <__ssputs_r+0x70>
 8002df8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002dfc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002e00:	d026      	beq.n	8002e50 <__ssputs_r+0x6c>
 8002e02:	6965      	ldr	r5, [r4, #20]
 8002e04:	6909      	ldr	r1, [r1, #16]
 8002e06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e0a:	eba3 0901 	sub.w	r9, r3, r1
 8002e0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e12:	1c7b      	adds	r3, r7, #1
 8002e14:	444b      	add	r3, r9
 8002e16:	106d      	asrs	r5, r5, #1
 8002e18:	429d      	cmp	r5, r3
 8002e1a:	bf38      	it	cc
 8002e1c:	461d      	movcc	r5, r3
 8002e1e:	0553      	lsls	r3, r2, #21
 8002e20:	d527      	bpl.n	8002e72 <__ssputs_r+0x8e>
 8002e22:	4629      	mov	r1, r5
 8002e24:	f7ff ff52 	bl	8002ccc <_malloc_r>
 8002e28:	4606      	mov	r6, r0
 8002e2a:	b360      	cbz	r0, 8002e86 <__ssputs_r+0xa2>
 8002e2c:	6921      	ldr	r1, [r4, #16]
 8002e2e:	464a      	mov	r2, r9
 8002e30:	f000 fd58 	bl	80038e4 <memcpy>
 8002e34:	89a3      	ldrh	r3, [r4, #12]
 8002e36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002e3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e3e:	81a3      	strh	r3, [r4, #12]
 8002e40:	6126      	str	r6, [r4, #16]
 8002e42:	6165      	str	r5, [r4, #20]
 8002e44:	444e      	add	r6, r9
 8002e46:	eba5 0509 	sub.w	r5, r5, r9
 8002e4a:	6026      	str	r6, [r4, #0]
 8002e4c:	60a5      	str	r5, [r4, #8]
 8002e4e:	463e      	mov	r6, r7
 8002e50:	42be      	cmp	r6, r7
 8002e52:	d900      	bls.n	8002e56 <__ssputs_r+0x72>
 8002e54:	463e      	mov	r6, r7
 8002e56:	6820      	ldr	r0, [r4, #0]
 8002e58:	4632      	mov	r2, r6
 8002e5a:	4641      	mov	r1, r8
 8002e5c:	f000 fcf6 	bl	800384c <memmove>
 8002e60:	68a3      	ldr	r3, [r4, #8]
 8002e62:	1b9b      	subs	r3, r3, r6
 8002e64:	60a3      	str	r3, [r4, #8]
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	4433      	add	r3, r6
 8002e6a:	6023      	str	r3, [r4, #0]
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e72:	462a      	mov	r2, r5
 8002e74:	f000 fd44 	bl	8003900 <_realloc_r>
 8002e78:	4606      	mov	r6, r0
 8002e7a:	2800      	cmp	r0, #0
 8002e7c:	d1e0      	bne.n	8002e40 <__ssputs_r+0x5c>
 8002e7e:	6921      	ldr	r1, [r4, #16]
 8002e80:	4650      	mov	r0, sl
 8002e82:	f7ff feb7 	bl	8002bf4 <_free_r>
 8002e86:	230c      	movs	r3, #12
 8002e88:	f8ca 3000 	str.w	r3, [sl]
 8002e8c:	89a3      	ldrh	r3, [r4, #12]
 8002e8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e92:	81a3      	strh	r3, [r4, #12]
 8002e94:	f04f 30ff 	mov.w	r0, #4294967295
 8002e98:	e7e9      	b.n	8002e6e <__ssputs_r+0x8a>
	...

08002e9c <_svfiprintf_r>:
 8002e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea0:	4698      	mov	r8, r3
 8002ea2:	898b      	ldrh	r3, [r1, #12]
 8002ea4:	061b      	lsls	r3, r3, #24
 8002ea6:	b09d      	sub	sp, #116	@ 0x74
 8002ea8:	4607      	mov	r7, r0
 8002eaa:	460d      	mov	r5, r1
 8002eac:	4614      	mov	r4, r2
 8002eae:	d510      	bpl.n	8002ed2 <_svfiprintf_r+0x36>
 8002eb0:	690b      	ldr	r3, [r1, #16]
 8002eb2:	b973      	cbnz	r3, 8002ed2 <_svfiprintf_r+0x36>
 8002eb4:	2140      	movs	r1, #64	@ 0x40
 8002eb6:	f7ff ff09 	bl	8002ccc <_malloc_r>
 8002eba:	6028      	str	r0, [r5, #0]
 8002ebc:	6128      	str	r0, [r5, #16]
 8002ebe:	b930      	cbnz	r0, 8002ece <_svfiprintf_r+0x32>
 8002ec0:	230c      	movs	r3, #12
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec8:	b01d      	add	sp, #116	@ 0x74
 8002eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ece:	2340      	movs	r3, #64	@ 0x40
 8002ed0:	616b      	str	r3, [r5, #20]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ed6:	2320      	movs	r3, #32
 8002ed8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002edc:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ee0:	2330      	movs	r3, #48	@ 0x30
 8002ee2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003080 <_svfiprintf_r+0x1e4>
 8002ee6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002eea:	f04f 0901 	mov.w	r9, #1
 8002eee:	4623      	mov	r3, r4
 8002ef0:	469a      	mov	sl, r3
 8002ef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ef6:	b10a      	cbz	r2, 8002efc <_svfiprintf_r+0x60>
 8002ef8:	2a25      	cmp	r2, #37	@ 0x25
 8002efa:	d1f9      	bne.n	8002ef0 <_svfiprintf_r+0x54>
 8002efc:	ebba 0b04 	subs.w	fp, sl, r4
 8002f00:	d00b      	beq.n	8002f1a <_svfiprintf_r+0x7e>
 8002f02:	465b      	mov	r3, fp
 8002f04:	4622      	mov	r2, r4
 8002f06:	4629      	mov	r1, r5
 8002f08:	4638      	mov	r0, r7
 8002f0a:	f7ff ff6b 	bl	8002de4 <__ssputs_r>
 8002f0e:	3001      	adds	r0, #1
 8002f10:	f000 80a7 	beq.w	8003062 <_svfiprintf_r+0x1c6>
 8002f14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002f16:	445a      	add	r2, fp
 8002f18:	9209      	str	r2, [sp, #36]	@ 0x24
 8002f1a:	f89a 3000 	ldrb.w	r3, [sl]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 809f 	beq.w	8003062 <_svfiprintf_r+0x1c6>
 8002f24:	2300      	movs	r3, #0
 8002f26:	f04f 32ff 	mov.w	r2, #4294967295
 8002f2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f2e:	f10a 0a01 	add.w	sl, sl, #1
 8002f32:	9304      	str	r3, [sp, #16]
 8002f34:	9307      	str	r3, [sp, #28]
 8002f36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f3c:	4654      	mov	r4, sl
 8002f3e:	2205      	movs	r2, #5
 8002f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f44:	484e      	ldr	r0, [pc, #312]	@ (8003080 <_svfiprintf_r+0x1e4>)
 8002f46:	f7fd f94b 	bl	80001e0 <memchr>
 8002f4a:	9a04      	ldr	r2, [sp, #16]
 8002f4c:	b9d8      	cbnz	r0, 8002f86 <_svfiprintf_r+0xea>
 8002f4e:	06d0      	lsls	r0, r2, #27
 8002f50:	bf44      	itt	mi
 8002f52:	2320      	movmi	r3, #32
 8002f54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f58:	0711      	lsls	r1, r2, #28
 8002f5a:	bf44      	itt	mi
 8002f5c:	232b      	movmi	r3, #43	@ 0x2b
 8002f5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f62:	f89a 3000 	ldrb.w	r3, [sl]
 8002f66:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f68:	d015      	beq.n	8002f96 <_svfiprintf_r+0xfa>
 8002f6a:	9a07      	ldr	r2, [sp, #28]
 8002f6c:	4654      	mov	r4, sl
 8002f6e:	2000      	movs	r0, #0
 8002f70:	f04f 0c0a 	mov.w	ip, #10
 8002f74:	4621      	mov	r1, r4
 8002f76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f7a:	3b30      	subs	r3, #48	@ 0x30
 8002f7c:	2b09      	cmp	r3, #9
 8002f7e:	d94b      	bls.n	8003018 <_svfiprintf_r+0x17c>
 8002f80:	b1b0      	cbz	r0, 8002fb0 <_svfiprintf_r+0x114>
 8002f82:	9207      	str	r2, [sp, #28]
 8002f84:	e014      	b.n	8002fb0 <_svfiprintf_r+0x114>
 8002f86:	eba0 0308 	sub.w	r3, r0, r8
 8002f8a:	fa09 f303 	lsl.w	r3, r9, r3
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	9304      	str	r3, [sp, #16]
 8002f92:	46a2      	mov	sl, r4
 8002f94:	e7d2      	b.n	8002f3c <_svfiprintf_r+0xa0>
 8002f96:	9b03      	ldr	r3, [sp, #12]
 8002f98:	1d19      	adds	r1, r3, #4
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	9103      	str	r1, [sp, #12]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	bfbb      	ittet	lt
 8002fa2:	425b      	neglt	r3, r3
 8002fa4:	f042 0202 	orrlt.w	r2, r2, #2
 8002fa8:	9307      	strge	r3, [sp, #28]
 8002faa:	9307      	strlt	r3, [sp, #28]
 8002fac:	bfb8      	it	lt
 8002fae:	9204      	strlt	r2, [sp, #16]
 8002fb0:	7823      	ldrb	r3, [r4, #0]
 8002fb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fb4:	d10a      	bne.n	8002fcc <_svfiprintf_r+0x130>
 8002fb6:	7863      	ldrb	r3, [r4, #1]
 8002fb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fba:	d132      	bne.n	8003022 <_svfiprintf_r+0x186>
 8002fbc:	9b03      	ldr	r3, [sp, #12]
 8002fbe:	1d1a      	adds	r2, r3, #4
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	9203      	str	r2, [sp, #12]
 8002fc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002fc8:	3402      	adds	r4, #2
 8002fca:	9305      	str	r3, [sp, #20]
 8002fcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003090 <_svfiprintf_r+0x1f4>
 8002fd0:	7821      	ldrb	r1, [r4, #0]
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	4650      	mov	r0, sl
 8002fd6:	f7fd f903 	bl	80001e0 <memchr>
 8002fda:	b138      	cbz	r0, 8002fec <_svfiprintf_r+0x150>
 8002fdc:	9b04      	ldr	r3, [sp, #16]
 8002fde:	eba0 000a 	sub.w	r0, r0, sl
 8002fe2:	2240      	movs	r2, #64	@ 0x40
 8002fe4:	4082      	lsls	r2, r0
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	3401      	adds	r4, #1
 8002fea:	9304      	str	r3, [sp, #16]
 8002fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ff0:	4824      	ldr	r0, [pc, #144]	@ (8003084 <_svfiprintf_r+0x1e8>)
 8002ff2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002ff6:	2206      	movs	r2, #6
 8002ff8:	f7fd f8f2 	bl	80001e0 <memchr>
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	d036      	beq.n	800306e <_svfiprintf_r+0x1d2>
 8003000:	4b21      	ldr	r3, [pc, #132]	@ (8003088 <_svfiprintf_r+0x1ec>)
 8003002:	bb1b      	cbnz	r3, 800304c <_svfiprintf_r+0x1b0>
 8003004:	9b03      	ldr	r3, [sp, #12]
 8003006:	3307      	adds	r3, #7
 8003008:	f023 0307 	bic.w	r3, r3, #7
 800300c:	3308      	adds	r3, #8
 800300e:	9303      	str	r3, [sp, #12]
 8003010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003012:	4433      	add	r3, r6
 8003014:	9309      	str	r3, [sp, #36]	@ 0x24
 8003016:	e76a      	b.n	8002eee <_svfiprintf_r+0x52>
 8003018:	fb0c 3202 	mla	r2, ip, r2, r3
 800301c:	460c      	mov	r4, r1
 800301e:	2001      	movs	r0, #1
 8003020:	e7a8      	b.n	8002f74 <_svfiprintf_r+0xd8>
 8003022:	2300      	movs	r3, #0
 8003024:	3401      	adds	r4, #1
 8003026:	9305      	str	r3, [sp, #20]
 8003028:	4619      	mov	r1, r3
 800302a:	f04f 0c0a 	mov.w	ip, #10
 800302e:	4620      	mov	r0, r4
 8003030:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003034:	3a30      	subs	r2, #48	@ 0x30
 8003036:	2a09      	cmp	r2, #9
 8003038:	d903      	bls.n	8003042 <_svfiprintf_r+0x1a6>
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0c6      	beq.n	8002fcc <_svfiprintf_r+0x130>
 800303e:	9105      	str	r1, [sp, #20]
 8003040:	e7c4      	b.n	8002fcc <_svfiprintf_r+0x130>
 8003042:	fb0c 2101 	mla	r1, ip, r1, r2
 8003046:	4604      	mov	r4, r0
 8003048:	2301      	movs	r3, #1
 800304a:	e7f0      	b.n	800302e <_svfiprintf_r+0x192>
 800304c:	ab03      	add	r3, sp, #12
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	462a      	mov	r2, r5
 8003052:	4b0e      	ldr	r3, [pc, #56]	@ (800308c <_svfiprintf_r+0x1f0>)
 8003054:	a904      	add	r1, sp, #16
 8003056:	4638      	mov	r0, r7
 8003058:	f3af 8000 	nop.w
 800305c:	1c42      	adds	r2, r0, #1
 800305e:	4606      	mov	r6, r0
 8003060:	d1d6      	bne.n	8003010 <_svfiprintf_r+0x174>
 8003062:	89ab      	ldrh	r3, [r5, #12]
 8003064:	065b      	lsls	r3, r3, #25
 8003066:	f53f af2d 	bmi.w	8002ec4 <_svfiprintf_r+0x28>
 800306a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800306c:	e72c      	b.n	8002ec8 <_svfiprintf_r+0x2c>
 800306e:	ab03      	add	r3, sp, #12
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	462a      	mov	r2, r5
 8003074:	4b05      	ldr	r3, [pc, #20]	@ (800308c <_svfiprintf_r+0x1f0>)
 8003076:	a904      	add	r1, sp, #16
 8003078:	4638      	mov	r0, r7
 800307a:	f000 f9bb 	bl	80033f4 <_printf_i>
 800307e:	e7ed      	b.n	800305c <_svfiprintf_r+0x1c0>
 8003080:	08003c30 	.word	0x08003c30
 8003084:	08003c3a 	.word	0x08003c3a
 8003088:	00000000 	.word	0x00000000
 800308c:	08002de5 	.word	0x08002de5
 8003090:	08003c36 	.word	0x08003c36

08003094 <__sfputc_r>:
 8003094:	6893      	ldr	r3, [r2, #8]
 8003096:	3b01      	subs	r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	b410      	push	{r4}
 800309c:	6093      	str	r3, [r2, #8]
 800309e:	da08      	bge.n	80030b2 <__sfputc_r+0x1e>
 80030a0:	6994      	ldr	r4, [r2, #24]
 80030a2:	42a3      	cmp	r3, r4
 80030a4:	db01      	blt.n	80030aa <__sfputc_r+0x16>
 80030a6:	290a      	cmp	r1, #10
 80030a8:	d103      	bne.n	80030b2 <__sfputc_r+0x1e>
 80030aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030ae:	f7ff bc90 	b.w	80029d2 <__swbuf_r>
 80030b2:	6813      	ldr	r3, [r2, #0]
 80030b4:	1c58      	adds	r0, r3, #1
 80030b6:	6010      	str	r0, [r2, #0]
 80030b8:	7019      	strb	r1, [r3, #0]
 80030ba:	4608      	mov	r0, r1
 80030bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <__sfputs_r>:
 80030c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c4:	4606      	mov	r6, r0
 80030c6:	460f      	mov	r7, r1
 80030c8:	4614      	mov	r4, r2
 80030ca:	18d5      	adds	r5, r2, r3
 80030cc:	42ac      	cmp	r4, r5
 80030ce:	d101      	bne.n	80030d4 <__sfputs_r+0x12>
 80030d0:	2000      	movs	r0, #0
 80030d2:	e007      	b.n	80030e4 <__sfputs_r+0x22>
 80030d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030d8:	463a      	mov	r2, r7
 80030da:	4630      	mov	r0, r6
 80030dc:	f7ff ffda 	bl	8003094 <__sfputc_r>
 80030e0:	1c43      	adds	r3, r0, #1
 80030e2:	d1f3      	bne.n	80030cc <__sfputs_r+0xa>
 80030e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080030e8 <_vfiprintf_r>:
 80030e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ec:	460d      	mov	r5, r1
 80030ee:	b09d      	sub	sp, #116	@ 0x74
 80030f0:	4614      	mov	r4, r2
 80030f2:	4698      	mov	r8, r3
 80030f4:	4606      	mov	r6, r0
 80030f6:	b118      	cbz	r0, 8003100 <_vfiprintf_r+0x18>
 80030f8:	6a03      	ldr	r3, [r0, #32]
 80030fa:	b90b      	cbnz	r3, 8003100 <_vfiprintf_r+0x18>
 80030fc:	f7ff fb5e 	bl	80027bc <__sinit>
 8003100:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003102:	07d9      	lsls	r1, r3, #31
 8003104:	d405      	bmi.n	8003112 <_vfiprintf_r+0x2a>
 8003106:	89ab      	ldrh	r3, [r5, #12]
 8003108:	059a      	lsls	r2, r3, #22
 800310a:	d402      	bmi.n	8003112 <_vfiprintf_r+0x2a>
 800310c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800310e:	f7ff fd6e 	bl	8002bee <__retarget_lock_acquire_recursive>
 8003112:	89ab      	ldrh	r3, [r5, #12]
 8003114:	071b      	lsls	r3, r3, #28
 8003116:	d501      	bpl.n	800311c <_vfiprintf_r+0x34>
 8003118:	692b      	ldr	r3, [r5, #16]
 800311a:	b99b      	cbnz	r3, 8003144 <_vfiprintf_r+0x5c>
 800311c:	4629      	mov	r1, r5
 800311e:	4630      	mov	r0, r6
 8003120:	f7ff fc96 	bl	8002a50 <__swsetup_r>
 8003124:	b170      	cbz	r0, 8003144 <_vfiprintf_r+0x5c>
 8003126:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003128:	07dc      	lsls	r4, r3, #31
 800312a:	d504      	bpl.n	8003136 <_vfiprintf_r+0x4e>
 800312c:	f04f 30ff 	mov.w	r0, #4294967295
 8003130:	b01d      	add	sp, #116	@ 0x74
 8003132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003136:	89ab      	ldrh	r3, [r5, #12]
 8003138:	0598      	lsls	r0, r3, #22
 800313a:	d4f7      	bmi.n	800312c <_vfiprintf_r+0x44>
 800313c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800313e:	f7ff fd57 	bl	8002bf0 <__retarget_lock_release_recursive>
 8003142:	e7f3      	b.n	800312c <_vfiprintf_r+0x44>
 8003144:	2300      	movs	r3, #0
 8003146:	9309      	str	r3, [sp, #36]	@ 0x24
 8003148:	2320      	movs	r3, #32
 800314a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800314e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003152:	2330      	movs	r3, #48	@ 0x30
 8003154:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003304 <_vfiprintf_r+0x21c>
 8003158:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800315c:	f04f 0901 	mov.w	r9, #1
 8003160:	4623      	mov	r3, r4
 8003162:	469a      	mov	sl, r3
 8003164:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003168:	b10a      	cbz	r2, 800316e <_vfiprintf_r+0x86>
 800316a:	2a25      	cmp	r2, #37	@ 0x25
 800316c:	d1f9      	bne.n	8003162 <_vfiprintf_r+0x7a>
 800316e:	ebba 0b04 	subs.w	fp, sl, r4
 8003172:	d00b      	beq.n	800318c <_vfiprintf_r+0xa4>
 8003174:	465b      	mov	r3, fp
 8003176:	4622      	mov	r2, r4
 8003178:	4629      	mov	r1, r5
 800317a:	4630      	mov	r0, r6
 800317c:	f7ff ffa1 	bl	80030c2 <__sfputs_r>
 8003180:	3001      	adds	r0, #1
 8003182:	f000 80a7 	beq.w	80032d4 <_vfiprintf_r+0x1ec>
 8003186:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003188:	445a      	add	r2, fp
 800318a:	9209      	str	r2, [sp, #36]	@ 0x24
 800318c:	f89a 3000 	ldrb.w	r3, [sl]
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 809f 	beq.w	80032d4 <_vfiprintf_r+0x1ec>
 8003196:	2300      	movs	r3, #0
 8003198:	f04f 32ff 	mov.w	r2, #4294967295
 800319c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031a0:	f10a 0a01 	add.w	sl, sl, #1
 80031a4:	9304      	str	r3, [sp, #16]
 80031a6:	9307      	str	r3, [sp, #28]
 80031a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80031ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80031ae:	4654      	mov	r4, sl
 80031b0:	2205      	movs	r2, #5
 80031b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031b6:	4853      	ldr	r0, [pc, #332]	@ (8003304 <_vfiprintf_r+0x21c>)
 80031b8:	f7fd f812 	bl	80001e0 <memchr>
 80031bc:	9a04      	ldr	r2, [sp, #16]
 80031be:	b9d8      	cbnz	r0, 80031f8 <_vfiprintf_r+0x110>
 80031c0:	06d1      	lsls	r1, r2, #27
 80031c2:	bf44      	itt	mi
 80031c4:	2320      	movmi	r3, #32
 80031c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031ca:	0713      	lsls	r3, r2, #28
 80031cc:	bf44      	itt	mi
 80031ce:	232b      	movmi	r3, #43	@ 0x2b
 80031d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031d4:	f89a 3000 	ldrb.w	r3, [sl]
 80031d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80031da:	d015      	beq.n	8003208 <_vfiprintf_r+0x120>
 80031dc:	9a07      	ldr	r2, [sp, #28]
 80031de:	4654      	mov	r4, sl
 80031e0:	2000      	movs	r0, #0
 80031e2:	f04f 0c0a 	mov.w	ip, #10
 80031e6:	4621      	mov	r1, r4
 80031e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031ec:	3b30      	subs	r3, #48	@ 0x30
 80031ee:	2b09      	cmp	r3, #9
 80031f0:	d94b      	bls.n	800328a <_vfiprintf_r+0x1a2>
 80031f2:	b1b0      	cbz	r0, 8003222 <_vfiprintf_r+0x13a>
 80031f4:	9207      	str	r2, [sp, #28]
 80031f6:	e014      	b.n	8003222 <_vfiprintf_r+0x13a>
 80031f8:	eba0 0308 	sub.w	r3, r0, r8
 80031fc:	fa09 f303 	lsl.w	r3, r9, r3
 8003200:	4313      	orrs	r3, r2
 8003202:	9304      	str	r3, [sp, #16]
 8003204:	46a2      	mov	sl, r4
 8003206:	e7d2      	b.n	80031ae <_vfiprintf_r+0xc6>
 8003208:	9b03      	ldr	r3, [sp, #12]
 800320a:	1d19      	adds	r1, r3, #4
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	9103      	str	r1, [sp, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	bfbb      	ittet	lt
 8003214:	425b      	neglt	r3, r3
 8003216:	f042 0202 	orrlt.w	r2, r2, #2
 800321a:	9307      	strge	r3, [sp, #28]
 800321c:	9307      	strlt	r3, [sp, #28]
 800321e:	bfb8      	it	lt
 8003220:	9204      	strlt	r2, [sp, #16]
 8003222:	7823      	ldrb	r3, [r4, #0]
 8003224:	2b2e      	cmp	r3, #46	@ 0x2e
 8003226:	d10a      	bne.n	800323e <_vfiprintf_r+0x156>
 8003228:	7863      	ldrb	r3, [r4, #1]
 800322a:	2b2a      	cmp	r3, #42	@ 0x2a
 800322c:	d132      	bne.n	8003294 <_vfiprintf_r+0x1ac>
 800322e:	9b03      	ldr	r3, [sp, #12]
 8003230:	1d1a      	adds	r2, r3, #4
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	9203      	str	r2, [sp, #12]
 8003236:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800323a:	3402      	adds	r4, #2
 800323c:	9305      	str	r3, [sp, #20]
 800323e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003314 <_vfiprintf_r+0x22c>
 8003242:	7821      	ldrb	r1, [r4, #0]
 8003244:	2203      	movs	r2, #3
 8003246:	4650      	mov	r0, sl
 8003248:	f7fc ffca 	bl	80001e0 <memchr>
 800324c:	b138      	cbz	r0, 800325e <_vfiprintf_r+0x176>
 800324e:	9b04      	ldr	r3, [sp, #16]
 8003250:	eba0 000a 	sub.w	r0, r0, sl
 8003254:	2240      	movs	r2, #64	@ 0x40
 8003256:	4082      	lsls	r2, r0
 8003258:	4313      	orrs	r3, r2
 800325a:	3401      	adds	r4, #1
 800325c:	9304      	str	r3, [sp, #16]
 800325e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003262:	4829      	ldr	r0, [pc, #164]	@ (8003308 <_vfiprintf_r+0x220>)
 8003264:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003268:	2206      	movs	r2, #6
 800326a:	f7fc ffb9 	bl	80001e0 <memchr>
 800326e:	2800      	cmp	r0, #0
 8003270:	d03f      	beq.n	80032f2 <_vfiprintf_r+0x20a>
 8003272:	4b26      	ldr	r3, [pc, #152]	@ (800330c <_vfiprintf_r+0x224>)
 8003274:	bb1b      	cbnz	r3, 80032be <_vfiprintf_r+0x1d6>
 8003276:	9b03      	ldr	r3, [sp, #12]
 8003278:	3307      	adds	r3, #7
 800327a:	f023 0307 	bic.w	r3, r3, #7
 800327e:	3308      	adds	r3, #8
 8003280:	9303      	str	r3, [sp, #12]
 8003282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003284:	443b      	add	r3, r7
 8003286:	9309      	str	r3, [sp, #36]	@ 0x24
 8003288:	e76a      	b.n	8003160 <_vfiprintf_r+0x78>
 800328a:	fb0c 3202 	mla	r2, ip, r2, r3
 800328e:	460c      	mov	r4, r1
 8003290:	2001      	movs	r0, #1
 8003292:	e7a8      	b.n	80031e6 <_vfiprintf_r+0xfe>
 8003294:	2300      	movs	r3, #0
 8003296:	3401      	adds	r4, #1
 8003298:	9305      	str	r3, [sp, #20]
 800329a:	4619      	mov	r1, r3
 800329c:	f04f 0c0a 	mov.w	ip, #10
 80032a0:	4620      	mov	r0, r4
 80032a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032a6:	3a30      	subs	r2, #48	@ 0x30
 80032a8:	2a09      	cmp	r2, #9
 80032aa:	d903      	bls.n	80032b4 <_vfiprintf_r+0x1cc>
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0c6      	beq.n	800323e <_vfiprintf_r+0x156>
 80032b0:	9105      	str	r1, [sp, #20]
 80032b2:	e7c4      	b.n	800323e <_vfiprintf_r+0x156>
 80032b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80032b8:	4604      	mov	r4, r0
 80032ba:	2301      	movs	r3, #1
 80032bc:	e7f0      	b.n	80032a0 <_vfiprintf_r+0x1b8>
 80032be:	ab03      	add	r3, sp, #12
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	462a      	mov	r2, r5
 80032c4:	4b12      	ldr	r3, [pc, #72]	@ (8003310 <_vfiprintf_r+0x228>)
 80032c6:	a904      	add	r1, sp, #16
 80032c8:	4630      	mov	r0, r6
 80032ca:	f3af 8000 	nop.w
 80032ce:	4607      	mov	r7, r0
 80032d0:	1c78      	adds	r0, r7, #1
 80032d2:	d1d6      	bne.n	8003282 <_vfiprintf_r+0x19a>
 80032d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80032d6:	07d9      	lsls	r1, r3, #31
 80032d8:	d405      	bmi.n	80032e6 <_vfiprintf_r+0x1fe>
 80032da:	89ab      	ldrh	r3, [r5, #12]
 80032dc:	059a      	lsls	r2, r3, #22
 80032de:	d402      	bmi.n	80032e6 <_vfiprintf_r+0x1fe>
 80032e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80032e2:	f7ff fc85 	bl	8002bf0 <__retarget_lock_release_recursive>
 80032e6:	89ab      	ldrh	r3, [r5, #12]
 80032e8:	065b      	lsls	r3, r3, #25
 80032ea:	f53f af1f 	bmi.w	800312c <_vfiprintf_r+0x44>
 80032ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80032f0:	e71e      	b.n	8003130 <_vfiprintf_r+0x48>
 80032f2:	ab03      	add	r3, sp, #12
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	462a      	mov	r2, r5
 80032f8:	4b05      	ldr	r3, [pc, #20]	@ (8003310 <_vfiprintf_r+0x228>)
 80032fa:	a904      	add	r1, sp, #16
 80032fc:	4630      	mov	r0, r6
 80032fe:	f000 f879 	bl	80033f4 <_printf_i>
 8003302:	e7e4      	b.n	80032ce <_vfiprintf_r+0x1e6>
 8003304:	08003c30 	.word	0x08003c30
 8003308:	08003c3a 	.word	0x08003c3a
 800330c:	00000000 	.word	0x00000000
 8003310:	080030c3 	.word	0x080030c3
 8003314:	08003c36 	.word	0x08003c36

08003318 <_printf_common>:
 8003318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800331c:	4616      	mov	r6, r2
 800331e:	4698      	mov	r8, r3
 8003320:	688a      	ldr	r2, [r1, #8]
 8003322:	690b      	ldr	r3, [r1, #16]
 8003324:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003328:	4293      	cmp	r3, r2
 800332a:	bfb8      	it	lt
 800332c:	4613      	movlt	r3, r2
 800332e:	6033      	str	r3, [r6, #0]
 8003330:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003334:	4607      	mov	r7, r0
 8003336:	460c      	mov	r4, r1
 8003338:	b10a      	cbz	r2, 800333e <_printf_common+0x26>
 800333a:	3301      	adds	r3, #1
 800333c:	6033      	str	r3, [r6, #0]
 800333e:	6823      	ldr	r3, [r4, #0]
 8003340:	0699      	lsls	r1, r3, #26
 8003342:	bf42      	ittt	mi
 8003344:	6833      	ldrmi	r3, [r6, #0]
 8003346:	3302      	addmi	r3, #2
 8003348:	6033      	strmi	r3, [r6, #0]
 800334a:	6825      	ldr	r5, [r4, #0]
 800334c:	f015 0506 	ands.w	r5, r5, #6
 8003350:	d106      	bne.n	8003360 <_printf_common+0x48>
 8003352:	f104 0a19 	add.w	sl, r4, #25
 8003356:	68e3      	ldr	r3, [r4, #12]
 8003358:	6832      	ldr	r2, [r6, #0]
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	42ab      	cmp	r3, r5
 800335e:	dc26      	bgt.n	80033ae <_printf_common+0x96>
 8003360:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003364:	6822      	ldr	r2, [r4, #0]
 8003366:	3b00      	subs	r3, #0
 8003368:	bf18      	it	ne
 800336a:	2301      	movne	r3, #1
 800336c:	0692      	lsls	r2, r2, #26
 800336e:	d42b      	bmi.n	80033c8 <_printf_common+0xb0>
 8003370:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003374:	4641      	mov	r1, r8
 8003376:	4638      	mov	r0, r7
 8003378:	47c8      	blx	r9
 800337a:	3001      	adds	r0, #1
 800337c:	d01e      	beq.n	80033bc <_printf_common+0xa4>
 800337e:	6823      	ldr	r3, [r4, #0]
 8003380:	6922      	ldr	r2, [r4, #16]
 8003382:	f003 0306 	and.w	r3, r3, #6
 8003386:	2b04      	cmp	r3, #4
 8003388:	bf02      	ittt	eq
 800338a:	68e5      	ldreq	r5, [r4, #12]
 800338c:	6833      	ldreq	r3, [r6, #0]
 800338e:	1aed      	subeq	r5, r5, r3
 8003390:	68a3      	ldr	r3, [r4, #8]
 8003392:	bf0c      	ite	eq
 8003394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003398:	2500      	movne	r5, #0
 800339a:	4293      	cmp	r3, r2
 800339c:	bfc4      	itt	gt
 800339e:	1a9b      	subgt	r3, r3, r2
 80033a0:	18ed      	addgt	r5, r5, r3
 80033a2:	2600      	movs	r6, #0
 80033a4:	341a      	adds	r4, #26
 80033a6:	42b5      	cmp	r5, r6
 80033a8:	d11a      	bne.n	80033e0 <_printf_common+0xc8>
 80033aa:	2000      	movs	r0, #0
 80033ac:	e008      	b.n	80033c0 <_printf_common+0xa8>
 80033ae:	2301      	movs	r3, #1
 80033b0:	4652      	mov	r2, sl
 80033b2:	4641      	mov	r1, r8
 80033b4:	4638      	mov	r0, r7
 80033b6:	47c8      	blx	r9
 80033b8:	3001      	adds	r0, #1
 80033ba:	d103      	bne.n	80033c4 <_printf_common+0xac>
 80033bc:	f04f 30ff 	mov.w	r0, #4294967295
 80033c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033c4:	3501      	adds	r5, #1
 80033c6:	e7c6      	b.n	8003356 <_printf_common+0x3e>
 80033c8:	18e1      	adds	r1, r4, r3
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	2030      	movs	r0, #48	@ 0x30
 80033ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80033d2:	4422      	add	r2, r4
 80033d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80033d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80033dc:	3302      	adds	r3, #2
 80033de:	e7c7      	b.n	8003370 <_printf_common+0x58>
 80033e0:	2301      	movs	r3, #1
 80033e2:	4622      	mov	r2, r4
 80033e4:	4641      	mov	r1, r8
 80033e6:	4638      	mov	r0, r7
 80033e8:	47c8      	blx	r9
 80033ea:	3001      	adds	r0, #1
 80033ec:	d0e6      	beq.n	80033bc <_printf_common+0xa4>
 80033ee:	3601      	adds	r6, #1
 80033f0:	e7d9      	b.n	80033a6 <_printf_common+0x8e>
	...

080033f4 <_printf_i>:
 80033f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033f8:	7e0f      	ldrb	r7, [r1, #24]
 80033fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80033fc:	2f78      	cmp	r7, #120	@ 0x78
 80033fe:	4691      	mov	r9, r2
 8003400:	4680      	mov	r8, r0
 8003402:	460c      	mov	r4, r1
 8003404:	469a      	mov	sl, r3
 8003406:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800340a:	d807      	bhi.n	800341c <_printf_i+0x28>
 800340c:	2f62      	cmp	r7, #98	@ 0x62
 800340e:	d80a      	bhi.n	8003426 <_printf_i+0x32>
 8003410:	2f00      	cmp	r7, #0
 8003412:	f000 80d1 	beq.w	80035b8 <_printf_i+0x1c4>
 8003416:	2f58      	cmp	r7, #88	@ 0x58
 8003418:	f000 80b8 	beq.w	800358c <_printf_i+0x198>
 800341c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003420:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003424:	e03a      	b.n	800349c <_printf_i+0xa8>
 8003426:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800342a:	2b15      	cmp	r3, #21
 800342c:	d8f6      	bhi.n	800341c <_printf_i+0x28>
 800342e:	a101      	add	r1, pc, #4	@ (adr r1, 8003434 <_printf_i+0x40>)
 8003430:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003434:	0800348d 	.word	0x0800348d
 8003438:	080034a1 	.word	0x080034a1
 800343c:	0800341d 	.word	0x0800341d
 8003440:	0800341d 	.word	0x0800341d
 8003444:	0800341d 	.word	0x0800341d
 8003448:	0800341d 	.word	0x0800341d
 800344c:	080034a1 	.word	0x080034a1
 8003450:	0800341d 	.word	0x0800341d
 8003454:	0800341d 	.word	0x0800341d
 8003458:	0800341d 	.word	0x0800341d
 800345c:	0800341d 	.word	0x0800341d
 8003460:	0800359f 	.word	0x0800359f
 8003464:	080034cb 	.word	0x080034cb
 8003468:	08003559 	.word	0x08003559
 800346c:	0800341d 	.word	0x0800341d
 8003470:	0800341d 	.word	0x0800341d
 8003474:	080035c1 	.word	0x080035c1
 8003478:	0800341d 	.word	0x0800341d
 800347c:	080034cb 	.word	0x080034cb
 8003480:	0800341d 	.word	0x0800341d
 8003484:	0800341d 	.word	0x0800341d
 8003488:	08003561 	.word	0x08003561
 800348c:	6833      	ldr	r3, [r6, #0]
 800348e:	1d1a      	adds	r2, r3, #4
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6032      	str	r2, [r6, #0]
 8003494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003498:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800349c:	2301      	movs	r3, #1
 800349e:	e09c      	b.n	80035da <_printf_i+0x1e6>
 80034a0:	6833      	ldr	r3, [r6, #0]
 80034a2:	6820      	ldr	r0, [r4, #0]
 80034a4:	1d19      	adds	r1, r3, #4
 80034a6:	6031      	str	r1, [r6, #0]
 80034a8:	0606      	lsls	r6, r0, #24
 80034aa:	d501      	bpl.n	80034b0 <_printf_i+0xbc>
 80034ac:	681d      	ldr	r5, [r3, #0]
 80034ae:	e003      	b.n	80034b8 <_printf_i+0xc4>
 80034b0:	0645      	lsls	r5, r0, #25
 80034b2:	d5fb      	bpl.n	80034ac <_printf_i+0xb8>
 80034b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80034b8:	2d00      	cmp	r5, #0
 80034ba:	da03      	bge.n	80034c4 <_printf_i+0xd0>
 80034bc:	232d      	movs	r3, #45	@ 0x2d
 80034be:	426d      	negs	r5, r5
 80034c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034c4:	4858      	ldr	r0, [pc, #352]	@ (8003628 <_printf_i+0x234>)
 80034c6:	230a      	movs	r3, #10
 80034c8:	e011      	b.n	80034ee <_printf_i+0xfa>
 80034ca:	6821      	ldr	r1, [r4, #0]
 80034cc:	6833      	ldr	r3, [r6, #0]
 80034ce:	0608      	lsls	r0, r1, #24
 80034d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80034d4:	d402      	bmi.n	80034dc <_printf_i+0xe8>
 80034d6:	0649      	lsls	r1, r1, #25
 80034d8:	bf48      	it	mi
 80034da:	b2ad      	uxthmi	r5, r5
 80034dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80034de:	4852      	ldr	r0, [pc, #328]	@ (8003628 <_printf_i+0x234>)
 80034e0:	6033      	str	r3, [r6, #0]
 80034e2:	bf14      	ite	ne
 80034e4:	230a      	movne	r3, #10
 80034e6:	2308      	moveq	r3, #8
 80034e8:	2100      	movs	r1, #0
 80034ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80034ee:	6866      	ldr	r6, [r4, #4]
 80034f0:	60a6      	str	r6, [r4, #8]
 80034f2:	2e00      	cmp	r6, #0
 80034f4:	db05      	blt.n	8003502 <_printf_i+0x10e>
 80034f6:	6821      	ldr	r1, [r4, #0]
 80034f8:	432e      	orrs	r6, r5
 80034fa:	f021 0104 	bic.w	r1, r1, #4
 80034fe:	6021      	str	r1, [r4, #0]
 8003500:	d04b      	beq.n	800359a <_printf_i+0x1a6>
 8003502:	4616      	mov	r6, r2
 8003504:	fbb5 f1f3 	udiv	r1, r5, r3
 8003508:	fb03 5711 	mls	r7, r3, r1, r5
 800350c:	5dc7      	ldrb	r7, [r0, r7]
 800350e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003512:	462f      	mov	r7, r5
 8003514:	42bb      	cmp	r3, r7
 8003516:	460d      	mov	r5, r1
 8003518:	d9f4      	bls.n	8003504 <_printf_i+0x110>
 800351a:	2b08      	cmp	r3, #8
 800351c:	d10b      	bne.n	8003536 <_printf_i+0x142>
 800351e:	6823      	ldr	r3, [r4, #0]
 8003520:	07df      	lsls	r7, r3, #31
 8003522:	d508      	bpl.n	8003536 <_printf_i+0x142>
 8003524:	6923      	ldr	r3, [r4, #16]
 8003526:	6861      	ldr	r1, [r4, #4]
 8003528:	4299      	cmp	r1, r3
 800352a:	bfde      	ittt	le
 800352c:	2330      	movle	r3, #48	@ 0x30
 800352e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003532:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003536:	1b92      	subs	r2, r2, r6
 8003538:	6122      	str	r2, [r4, #16]
 800353a:	f8cd a000 	str.w	sl, [sp]
 800353e:	464b      	mov	r3, r9
 8003540:	aa03      	add	r2, sp, #12
 8003542:	4621      	mov	r1, r4
 8003544:	4640      	mov	r0, r8
 8003546:	f7ff fee7 	bl	8003318 <_printf_common>
 800354a:	3001      	adds	r0, #1
 800354c:	d14a      	bne.n	80035e4 <_printf_i+0x1f0>
 800354e:	f04f 30ff 	mov.w	r0, #4294967295
 8003552:	b004      	add	sp, #16
 8003554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	f043 0320 	orr.w	r3, r3, #32
 800355e:	6023      	str	r3, [r4, #0]
 8003560:	4832      	ldr	r0, [pc, #200]	@ (800362c <_printf_i+0x238>)
 8003562:	2778      	movs	r7, #120	@ 0x78
 8003564:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003568:	6823      	ldr	r3, [r4, #0]
 800356a:	6831      	ldr	r1, [r6, #0]
 800356c:	061f      	lsls	r7, r3, #24
 800356e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003572:	d402      	bmi.n	800357a <_printf_i+0x186>
 8003574:	065f      	lsls	r7, r3, #25
 8003576:	bf48      	it	mi
 8003578:	b2ad      	uxthmi	r5, r5
 800357a:	6031      	str	r1, [r6, #0]
 800357c:	07d9      	lsls	r1, r3, #31
 800357e:	bf44      	itt	mi
 8003580:	f043 0320 	orrmi.w	r3, r3, #32
 8003584:	6023      	strmi	r3, [r4, #0]
 8003586:	b11d      	cbz	r5, 8003590 <_printf_i+0x19c>
 8003588:	2310      	movs	r3, #16
 800358a:	e7ad      	b.n	80034e8 <_printf_i+0xf4>
 800358c:	4826      	ldr	r0, [pc, #152]	@ (8003628 <_printf_i+0x234>)
 800358e:	e7e9      	b.n	8003564 <_printf_i+0x170>
 8003590:	6823      	ldr	r3, [r4, #0]
 8003592:	f023 0320 	bic.w	r3, r3, #32
 8003596:	6023      	str	r3, [r4, #0]
 8003598:	e7f6      	b.n	8003588 <_printf_i+0x194>
 800359a:	4616      	mov	r6, r2
 800359c:	e7bd      	b.n	800351a <_printf_i+0x126>
 800359e:	6833      	ldr	r3, [r6, #0]
 80035a0:	6825      	ldr	r5, [r4, #0]
 80035a2:	6961      	ldr	r1, [r4, #20]
 80035a4:	1d18      	adds	r0, r3, #4
 80035a6:	6030      	str	r0, [r6, #0]
 80035a8:	062e      	lsls	r6, r5, #24
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	d501      	bpl.n	80035b2 <_printf_i+0x1be>
 80035ae:	6019      	str	r1, [r3, #0]
 80035b0:	e002      	b.n	80035b8 <_printf_i+0x1c4>
 80035b2:	0668      	lsls	r0, r5, #25
 80035b4:	d5fb      	bpl.n	80035ae <_printf_i+0x1ba>
 80035b6:	8019      	strh	r1, [r3, #0]
 80035b8:	2300      	movs	r3, #0
 80035ba:	6123      	str	r3, [r4, #16]
 80035bc:	4616      	mov	r6, r2
 80035be:	e7bc      	b.n	800353a <_printf_i+0x146>
 80035c0:	6833      	ldr	r3, [r6, #0]
 80035c2:	1d1a      	adds	r2, r3, #4
 80035c4:	6032      	str	r2, [r6, #0]
 80035c6:	681e      	ldr	r6, [r3, #0]
 80035c8:	6862      	ldr	r2, [r4, #4]
 80035ca:	2100      	movs	r1, #0
 80035cc:	4630      	mov	r0, r6
 80035ce:	f7fc fe07 	bl	80001e0 <memchr>
 80035d2:	b108      	cbz	r0, 80035d8 <_printf_i+0x1e4>
 80035d4:	1b80      	subs	r0, r0, r6
 80035d6:	6060      	str	r0, [r4, #4]
 80035d8:	6863      	ldr	r3, [r4, #4]
 80035da:	6123      	str	r3, [r4, #16]
 80035dc:	2300      	movs	r3, #0
 80035de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035e2:	e7aa      	b.n	800353a <_printf_i+0x146>
 80035e4:	6923      	ldr	r3, [r4, #16]
 80035e6:	4632      	mov	r2, r6
 80035e8:	4649      	mov	r1, r9
 80035ea:	4640      	mov	r0, r8
 80035ec:	47d0      	blx	sl
 80035ee:	3001      	adds	r0, #1
 80035f0:	d0ad      	beq.n	800354e <_printf_i+0x15a>
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	079b      	lsls	r3, r3, #30
 80035f6:	d413      	bmi.n	8003620 <_printf_i+0x22c>
 80035f8:	68e0      	ldr	r0, [r4, #12]
 80035fa:	9b03      	ldr	r3, [sp, #12]
 80035fc:	4298      	cmp	r0, r3
 80035fe:	bfb8      	it	lt
 8003600:	4618      	movlt	r0, r3
 8003602:	e7a6      	b.n	8003552 <_printf_i+0x15e>
 8003604:	2301      	movs	r3, #1
 8003606:	4632      	mov	r2, r6
 8003608:	4649      	mov	r1, r9
 800360a:	4640      	mov	r0, r8
 800360c:	47d0      	blx	sl
 800360e:	3001      	adds	r0, #1
 8003610:	d09d      	beq.n	800354e <_printf_i+0x15a>
 8003612:	3501      	adds	r5, #1
 8003614:	68e3      	ldr	r3, [r4, #12]
 8003616:	9903      	ldr	r1, [sp, #12]
 8003618:	1a5b      	subs	r3, r3, r1
 800361a:	42ab      	cmp	r3, r5
 800361c:	dcf2      	bgt.n	8003604 <_printf_i+0x210>
 800361e:	e7eb      	b.n	80035f8 <_printf_i+0x204>
 8003620:	2500      	movs	r5, #0
 8003622:	f104 0619 	add.w	r6, r4, #25
 8003626:	e7f5      	b.n	8003614 <_printf_i+0x220>
 8003628:	08003c41 	.word	0x08003c41
 800362c:	08003c52 	.word	0x08003c52

08003630 <__sflush_r>:
 8003630:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003638:	0716      	lsls	r6, r2, #28
 800363a:	4605      	mov	r5, r0
 800363c:	460c      	mov	r4, r1
 800363e:	d454      	bmi.n	80036ea <__sflush_r+0xba>
 8003640:	684b      	ldr	r3, [r1, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	dc02      	bgt.n	800364c <__sflush_r+0x1c>
 8003646:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003648:	2b00      	cmp	r3, #0
 800364a:	dd48      	ble.n	80036de <__sflush_r+0xae>
 800364c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800364e:	2e00      	cmp	r6, #0
 8003650:	d045      	beq.n	80036de <__sflush_r+0xae>
 8003652:	2300      	movs	r3, #0
 8003654:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003658:	682f      	ldr	r7, [r5, #0]
 800365a:	6a21      	ldr	r1, [r4, #32]
 800365c:	602b      	str	r3, [r5, #0]
 800365e:	d030      	beq.n	80036c2 <__sflush_r+0x92>
 8003660:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003662:	89a3      	ldrh	r3, [r4, #12]
 8003664:	0759      	lsls	r1, r3, #29
 8003666:	d505      	bpl.n	8003674 <__sflush_r+0x44>
 8003668:	6863      	ldr	r3, [r4, #4]
 800366a:	1ad2      	subs	r2, r2, r3
 800366c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800366e:	b10b      	cbz	r3, 8003674 <__sflush_r+0x44>
 8003670:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003672:	1ad2      	subs	r2, r2, r3
 8003674:	2300      	movs	r3, #0
 8003676:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003678:	6a21      	ldr	r1, [r4, #32]
 800367a:	4628      	mov	r0, r5
 800367c:	47b0      	blx	r6
 800367e:	1c43      	adds	r3, r0, #1
 8003680:	89a3      	ldrh	r3, [r4, #12]
 8003682:	d106      	bne.n	8003692 <__sflush_r+0x62>
 8003684:	6829      	ldr	r1, [r5, #0]
 8003686:	291d      	cmp	r1, #29
 8003688:	d82b      	bhi.n	80036e2 <__sflush_r+0xb2>
 800368a:	4a2a      	ldr	r2, [pc, #168]	@ (8003734 <__sflush_r+0x104>)
 800368c:	40ca      	lsrs	r2, r1
 800368e:	07d6      	lsls	r6, r2, #31
 8003690:	d527      	bpl.n	80036e2 <__sflush_r+0xb2>
 8003692:	2200      	movs	r2, #0
 8003694:	6062      	str	r2, [r4, #4]
 8003696:	04d9      	lsls	r1, r3, #19
 8003698:	6922      	ldr	r2, [r4, #16]
 800369a:	6022      	str	r2, [r4, #0]
 800369c:	d504      	bpl.n	80036a8 <__sflush_r+0x78>
 800369e:	1c42      	adds	r2, r0, #1
 80036a0:	d101      	bne.n	80036a6 <__sflush_r+0x76>
 80036a2:	682b      	ldr	r3, [r5, #0]
 80036a4:	b903      	cbnz	r3, 80036a8 <__sflush_r+0x78>
 80036a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80036a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80036aa:	602f      	str	r7, [r5, #0]
 80036ac:	b1b9      	cbz	r1, 80036de <__sflush_r+0xae>
 80036ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80036b2:	4299      	cmp	r1, r3
 80036b4:	d002      	beq.n	80036bc <__sflush_r+0x8c>
 80036b6:	4628      	mov	r0, r5
 80036b8:	f7ff fa9c 	bl	8002bf4 <_free_r>
 80036bc:	2300      	movs	r3, #0
 80036be:	6363      	str	r3, [r4, #52]	@ 0x34
 80036c0:	e00d      	b.n	80036de <__sflush_r+0xae>
 80036c2:	2301      	movs	r3, #1
 80036c4:	4628      	mov	r0, r5
 80036c6:	47b0      	blx	r6
 80036c8:	4602      	mov	r2, r0
 80036ca:	1c50      	adds	r0, r2, #1
 80036cc:	d1c9      	bne.n	8003662 <__sflush_r+0x32>
 80036ce:	682b      	ldr	r3, [r5, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0c6      	beq.n	8003662 <__sflush_r+0x32>
 80036d4:	2b1d      	cmp	r3, #29
 80036d6:	d001      	beq.n	80036dc <__sflush_r+0xac>
 80036d8:	2b16      	cmp	r3, #22
 80036da:	d11e      	bne.n	800371a <__sflush_r+0xea>
 80036dc:	602f      	str	r7, [r5, #0]
 80036de:	2000      	movs	r0, #0
 80036e0:	e022      	b.n	8003728 <__sflush_r+0xf8>
 80036e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036e6:	b21b      	sxth	r3, r3
 80036e8:	e01b      	b.n	8003722 <__sflush_r+0xf2>
 80036ea:	690f      	ldr	r7, [r1, #16]
 80036ec:	2f00      	cmp	r7, #0
 80036ee:	d0f6      	beq.n	80036de <__sflush_r+0xae>
 80036f0:	0793      	lsls	r3, r2, #30
 80036f2:	680e      	ldr	r6, [r1, #0]
 80036f4:	bf08      	it	eq
 80036f6:	694b      	ldreq	r3, [r1, #20]
 80036f8:	600f      	str	r7, [r1, #0]
 80036fa:	bf18      	it	ne
 80036fc:	2300      	movne	r3, #0
 80036fe:	eba6 0807 	sub.w	r8, r6, r7
 8003702:	608b      	str	r3, [r1, #8]
 8003704:	f1b8 0f00 	cmp.w	r8, #0
 8003708:	dde9      	ble.n	80036de <__sflush_r+0xae>
 800370a:	6a21      	ldr	r1, [r4, #32]
 800370c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800370e:	4643      	mov	r3, r8
 8003710:	463a      	mov	r2, r7
 8003712:	4628      	mov	r0, r5
 8003714:	47b0      	blx	r6
 8003716:	2800      	cmp	r0, #0
 8003718:	dc08      	bgt.n	800372c <__sflush_r+0xfc>
 800371a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800371e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003722:	81a3      	strh	r3, [r4, #12]
 8003724:	f04f 30ff 	mov.w	r0, #4294967295
 8003728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800372c:	4407      	add	r7, r0
 800372e:	eba8 0800 	sub.w	r8, r8, r0
 8003732:	e7e7      	b.n	8003704 <__sflush_r+0xd4>
 8003734:	20400001 	.word	0x20400001

08003738 <_fflush_r>:
 8003738:	b538      	push	{r3, r4, r5, lr}
 800373a:	690b      	ldr	r3, [r1, #16]
 800373c:	4605      	mov	r5, r0
 800373e:	460c      	mov	r4, r1
 8003740:	b913      	cbnz	r3, 8003748 <_fflush_r+0x10>
 8003742:	2500      	movs	r5, #0
 8003744:	4628      	mov	r0, r5
 8003746:	bd38      	pop	{r3, r4, r5, pc}
 8003748:	b118      	cbz	r0, 8003752 <_fflush_r+0x1a>
 800374a:	6a03      	ldr	r3, [r0, #32]
 800374c:	b90b      	cbnz	r3, 8003752 <_fflush_r+0x1a>
 800374e:	f7ff f835 	bl	80027bc <__sinit>
 8003752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f3      	beq.n	8003742 <_fflush_r+0xa>
 800375a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800375c:	07d0      	lsls	r0, r2, #31
 800375e:	d404      	bmi.n	800376a <_fflush_r+0x32>
 8003760:	0599      	lsls	r1, r3, #22
 8003762:	d402      	bmi.n	800376a <_fflush_r+0x32>
 8003764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003766:	f7ff fa42 	bl	8002bee <__retarget_lock_acquire_recursive>
 800376a:	4628      	mov	r0, r5
 800376c:	4621      	mov	r1, r4
 800376e:	f7ff ff5f 	bl	8003630 <__sflush_r>
 8003772:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003774:	07da      	lsls	r2, r3, #31
 8003776:	4605      	mov	r5, r0
 8003778:	d4e4      	bmi.n	8003744 <_fflush_r+0xc>
 800377a:	89a3      	ldrh	r3, [r4, #12]
 800377c:	059b      	lsls	r3, r3, #22
 800377e:	d4e1      	bmi.n	8003744 <_fflush_r+0xc>
 8003780:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003782:	f7ff fa35 	bl	8002bf0 <__retarget_lock_release_recursive>
 8003786:	e7dd      	b.n	8003744 <_fflush_r+0xc>

08003788 <__swhatbuf_r>:
 8003788:	b570      	push	{r4, r5, r6, lr}
 800378a:	460c      	mov	r4, r1
 800378c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003790:	2900      	cmp	r1, #0
 8003792:	b096      	sub	sp, #88	@ 0x58
 8003794:	4615      	mov	r5, r2
 8003796:	461e      	mov	r6, r3
 8003798:	da0d      	bge.n	80037b6 <__swhatbuf_r+0x2e>
 800379a:	89a3      	ldrh	r3, [r4, #12]
 800379c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80037a0:	f04f 0100 	mov.w	r1, #0
 80037a4:	bf14      	ite	ne
 80037a6:	2340      	movne	r3, #64	@ 0x40
 80037a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80037ac:	2000      	movs	r0, #0
 80037ae:	6031      	str	r1, [r6, #0]
 80037b0:	602b      	str	r3, [r5, #0]
 80037b2:	b016      	add	sp, #88	@ 0x58
 80037b4:	bd70      	pop	{r4, r5, r6, pc}
 80037b6:	466a      	mov	r2, sp
 80037b8:	f000 f862 	bl	8003880 <_fstat_r>
 80037bc:	2800      	cmp	r0, #0
 80037be:	dbec      	blt.n	800379a <__swhatbuf_r+0x12>
 80037c0:	9901      	ldr	r1, [sp, #4]
 80037c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80037c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80037ca:	4259      	negs	r1, r3
 80037cc:	4159      	adcs	r1, r3
 80037ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037d2:	e7eb      	b.n	80037ac <__swhatbuf_r+0x24>

080037d4 <__smakebuf_r>:
 80037d4:	898b      	ldrh	r3, [r1, #12]
 80037d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037d8:	079d      	lsls	r5, r3, #30
 80037da:	4606      	mov	r6, r0
 80037dc:	460c      	mov	r4, r1
 80037de:	d507      	bpl.n	80037f0 <__smakebuf_r+0x1c>
 80037e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80037e4:	6023      	str	r3, [r4, #0]
 80037e6:	6123      	str	r3, [r4, #16]
 80037e8:	2301      	movs	r3, #1
 80037ea:	6163      	str	r3, [r4, #20]
 80037ec:	b003      	add	sp, #12
 80037ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037f0:	ab01      	add	r3, sp, #4
 80037f2:	466a      	mov	r2, sp
 80037f4:	f7ff ffc8 	bl	8003788 <__swhatbuf_r>
 80037f8:	9f00      	ldr	r7, [sp, #0]
 80037fa:	4605      	mov	r5, r0
 80037fc:	4639      	mov	r1, r7
 80037fe:	4630      	mov	r0, r6
 8003800:	f7ff fa64 	bl	8002ccc <_malloc_r>
 8003804:	b948      	cbnz	r0, 800381a <__smakebuf_r+0x46>
 8003806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800380a:	059a      	lsls	r2, r3, #22
 800380c:	d4ee      	bmi.n	80037ec <__smakebuf_r+0x18>
 800380e:	f023 0303 	bic.w	r3, r3, #3
 8003812:	f043 0302 	orr.w	r3, r3, #2
 8003816:	81a3      	strh	r3, [r4, #12]
 8003818:	e7e2      	b.n	80037e0 <__smakebuf_r+0xc>
 800381a:	89a3      	ldrh	r3, [r4, #12]
 800381c:	6020      	str	r0, [r4, #0]
 800381e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003822:	81a3      	strh	r3, [r4, #12]
 8003824:	9b01      	ldr	r3, [sp, #4]
 8003826:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800382a:	b15b      	cbz	r3, 8003844 <__smakebuf_r+0x70>
 800382c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003830:	4630      	mov	r0, r6
 8003832:	f000 f837 	bl	80038a4 <_isatty_r>
 8003836:	b128      	cbz	r0, 8003844 <__smakebuf_r+0x70>
 8003838:	89a3      	ldrh	r3, [r4, #12]
 800383a:	f023 0303 	bic.w	r3, r3, #3
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	81a3      	strh	r3, [r4, #12]
 8003844:	89a3      	ldrh	r3, [r4, #12]
 8003846:	431d      	orrs	r5, r3
 8003848:	81a5      	strh	r5, [r4, #12]
 800384a:	e7cf      	b.n	80037ec <__smakebuf_r+0x18>

0800384c <memmove>:
 800384c:	4288      	cmp	r0, r1
 800384e:	b510      	push	{r4, lr}
 8003850:	eb01 0402 	add.w	r4, r1, r2
 8003854:	d902      	bls.n	800385c <memmove+0x10>
 8003856:	4284      	cmp	r4, r0
 8003858:	4623      	mov	r3, r4
 800385a:	d807      	bhi.n	800386c <memmove+0x20>
 800385c:	1e43      	subs	r3, r0, #1
 800385e:	42a1      	cmp	r1, r4
 8003860:	d008      	beq.n	8003874 <memmove+0x28>
 8003862:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003866:	f803 2f01 	strb.w	r2, [r3, #1]!
 800386a:	e7f8      	b.n	800385e <memmove+0x12>
 800386c:	4402      	add	r2, r0
 800386e:	4601      	mov	r1, r0
 8003870:	428a      	cmp	r2, r1
 8003872:	d100      	bne.n	8003876 <memmove+0x2a>
 8003874:	bd10      	pop	{r4, pc}
 8003876:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800387a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800387e:	e7f7      	b.n	8003870 <memmove+0x24>

08003880 <_fstat_r>:
 8003880:	b538      	push	{r3, r4, r5, lr}
 8003882:	4d07      	ldr	r5, [pc, #28]	@ (80038a0 <_fstat_r+0x20>)
 8003884:	2300      	movs	r3, #0
 8003886:	4604      	mov	r4, r0
 8003888:	4608      	mov	r0, r1
 800388a:	4611      	mov	r1, r2
 800388c:	602b      	str	r3, [r5, #0]
 800388e:	f7fd fbc6 	bl	800101e <_fstat>
 8003892:	1c43      	adds	r3, r0, #1
 8003894:	d102      	bne.n	800389c <_fstat_r+0x1c>
 8003896:	682b      	ldr	r3, [r5, #0]
 8003898:	b103      	cbz	r3, 800389c <_fstat_r+0x1c>
 800389a:	6023      	str	r3, [r4, #0]
 800389c:	bd38      	pop	{r3, r4, r5, pc}
 800389e:	bf00      	nop
 80038a0:	20000224 	.word	0x20000224

080038a4 <_isatty_r>:
 80038a4:	b538      	push	{r3, r4, r5, lr}
 80038a6:	4d06      	ldr	r5, [pc, #24]	@ (80038c0 <_isatty_r+0x1c>)
 80038a8:	2300      	movs	r3, #0
 80038aa:	4604      	mov	r4, r0
 80038ac:	4608      	mov	r0, r1
 80038ae:	602b      	str	r3, [r5, #0]
 80038b0:	f7fd fbc5 	bl	800103e <_isatty>
 80038b4:	1c43      	adds	r3, r0, #1
 80038b6:	d102      	bne.n	80038be <_isatty_r+0x1a>
 80038b8:	682b      	ldr	r3, [r5, #0]
 80038ba:	b103      	cbz	r3, 80038be <_isatty_r+0x1a>
 80038bc:	6023      	str	r3, [r4, #0]
 80038be:	bd38      	pop	{r3, r4, r5, pc}
 80038c0:	20000224 	.word	0x20000224

080038c4 <_sbrk_r>:
 80038c4:	b538      	push	{r3, r4, r5, lr}
 80038c6:	4d06      	ldr	r5, [pc, #24]	@ (80038e0 <_sbrk_r+0x1c>)
 80038c8:	2300      	movs	r3, #0
 80038ca:	4604      	mov	r4, r0
 80038cc:	4608      	mov	r0, r1
 80038ce:	602b      	str	r3, [r5, #0]
 80038d0:	f7fd fbce 	bl	8001070 <_sbrk>
 80038d4:	1c43      	adds	r3, r0, #1
 80038d6:	d102      	bne.n	80038de <_sbrk_r+0x1a>
 80038d8:	682b      	ldr	r3, [r5, #0]
 80038da:	b103      	cbz	r3, 80038de <_sbrk_r+0x1a>
 80038dc:	6023      	str	r3, [r4, #0]
 80038de:	bd38      	pop	{r3, r4, r5, pc}
 80038e0:	20000224 	.word	0x20000224

080038e4 <memcpy>:
 80038e4:	440a      	add	r2, r1
 80038e6:	4291      	cmp	r1, r2
 80038e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80038ec:	d100      	bne.n	80038f0 <memcpy+0xc>
 80038ee:	4770      	bx	lr
 80038f0:	b510      	push	{r4, lr}
 80038f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038fa:	4291      	cmp	r1, r2
 80038fc:	d1f9      	bne.n	80038f2 <memcpy+0xe>
 80038fe:	bd10      	pop	{r4, pc}

08003900 <_realloc_r>:
 8003900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003904:	4607      	mov	r7, r0
 8003906:	4614      	mov	r4, r2
 8003908:	460d      	mov	r5, r1
 800390a:	b921      	cbnz	r1, 8003916 <_realloc_r+0x16>
 800390c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003910:	4611      	mov	r1, r2
 8003912:	f7ff b9db 	b.w	8002ccc <_malloc_r>
 8003916:	b92a      	cbnz	r2, 8003924 <_realloc_r+0x24>
 8003918:	f7ff f96c 	bl	8002bf4 <_free_r>
 800391c:	4625      	mov	r5, r4
 800391e:	4628      	mov	r0, r5
 8003920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003924:	f000 f81a 	bl	800395c <_malloc_usable_size_r>
 8003928:	4284      	cmp	r4, r0
 800392a:	4606      	mov	r6, r0
 800392c:	d802      	bhi.n	8003934 <_realloc_r+0x34>
 800392e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003932:	d8f4      	bhi.n	800391e <_realloc_r+0x1e>
 8003934:	4621      	mov	r1, r4
 8003936:	4638      	mov	r0, r7
 8003938:	f7ff f9c8 	bl	8002ccc <_malloc_r>
 800393c:	4680      	mov	r8, r0
 800393e:	b908      	cbnz	r0, 8003944 <_realloc_r+0x44>
 8003940:	4645      	mov	r5, r8
 8003942:	e7ec      	b.n	800391e <_realloc_r+0x1e>
 8003944:	42b4      	cmp	r4, r6
 8003946:	4622      	mov	r2, r4
 8003948:	4629      	mov	r1, r5
 800394a:	bf28      	it	cs
 800394c:	4632      	movcs	r2, r6
 800394e:	f7ff ffc9 	bl	80038e4 <memcpy>
 8003952:	4629      	mov	r1, r5
 8003954:	4638      	mov	r0, r7
 8003956:	f7ff f94d 	bl	8002bf4 <_free_r>
 800395a:	e7f1      	b.n	8003940 <_realloc_r+0x40>

0800395c <_malloc_usable_size_r>:
 800395c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003960:	1f18      	subs	r0, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	bfbc      	itt	lt
 8003966:	580b      	ldrlt	r3, [r1, r0]
 8003968:	18c0      	addlt	r0, r0, r3
 800396a:	4770      	bx	lr

0800396c <_init>:
 800396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396e:	bf00      	nop
 8003970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003972:	bc08      	pop	{r3}
 8003974:	469e      	mov	lr, r3
 8003976:	4770      	bx	lr

08003978 <_fini>:
 8003978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397a:	bf00      	nop
 800397c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397e:	bc08      	pop	{r3}
 8003980:	469e      	mov	lr, r3
 8003982:	4770      	bx	lr
